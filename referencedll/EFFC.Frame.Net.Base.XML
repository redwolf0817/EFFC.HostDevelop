<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EFFC.Frame.Net.Base</name>
    </assembly>
    <members>
        <member name="T:EFFC.Frame.Net.Base.AttributeDefine.CanUseAttribute">
            <summary>
            属性或方法的是否允许使用
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.AttributeDefine.CanUseAttribute.IsCanUse">
            <summary>
            是否允许使用
            </summary>
        </member>
        <member name="T:EFFC.Frame.Net.Base.AttributeDefine.ConvertorAttribute">
            <summary>
            property的数据类型转换器
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.AttributeDefine.ConvertorAttribute.#ctor(EFFC.Frame.Net.Base.Interfaces.DataConvert.IDataConvert)">
            <summary>
            constructor
            </summary>
            <param name="convert"></param>
        </member>
        <member name="P:EFFC.Frame.Net.Base.AttributeDefine.ConvertorAttribute.Convertor">
            <summary>
            转换器
            </summary>
        </member>
        <member name="T:EFFC.Frame.Net.Base.AttributeDefine.DescAttribute">
            <summary>
            属性或方法的注释描述
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.AttributeDefine.DescAttribute.Desc">
            <summary>
            注释描述
            </summary>
        </member>
        <member name="T:EFFC.Frame.Net.Base.Common.ComFunc">
            <summary>
            公共方法
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.SetProcessWorkingSetSize(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            SetProcessWorkingSetSize
            </summary>
            <param name="handle"></param>
            <param name="minimumWorkingSetSize"></param>
            <param name="maximumWorkingSetSize"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.nvl(System.Object)">
            <summary>
            字符串的Null處理，并作Trim處理
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.nvlNotrim(System.Object)">
            <summary>
            字符串的Null處理，不作Trim處理
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.FindFileName(System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.StringArrayToArrayList(System.String[])">
            <summary>
            string數組轉化ArrayList
            </summary>
            <param name="strs"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.Random(System.Int32)">
            <summary>
            返回指定長度的隨機數
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.CallExe(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            調用Exe程序
            </summary>
            <param name="exepath"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.EnumParse``1(System.String)">
            <summary>
            將字符串轉換成對應的Enum類型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.Enum2String``1(``0)">
            <summary>
            将enum的值名称转成string
            </summary>
            <typeparam name="T"></typeparam>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.MergeScript(System.String,System.String)">
            <summary>
            合并两段脚本
            </summary>
            <param name="firstScript"></param>
            <param name="secondScript"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.EnsureEndWithSemiColon(System.String)">
            <summary>
            字符串结尾加上分号
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.MemoryCollect">
             <summary>
            強制清理內存，慎用，適用於win32NT平臺
             </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.IsChineseString(System.String)">
             <summary>
            判斷是否為中文
             </summary>
             <param name="str"></param>
             <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.ConvertEncode(System.String,System.Text.Encoding,System.Text.Encoding)">
            <summary>
            將字符串從一種編碼轉變成另一種編碼
            </summary>
            <param name="str">待轉換的字符串</param>
            <param name="from">原編碼</param>
            <param name="to">待轉出的編碼</param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.getMD5(System.String)">
            <summary>
             將文件進行md5加密 , md5 值保存在filename.md5 文件中
            </summary>
            <param name="path">需要加密的文件路徑</param>
            <returns>加密的MD5碼</returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.getMD5_String(System.String,System.Text.Encoding)">
            <summary>
            將字串進行md5加密
            </summary>
            <param name="data"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.Base64Code(System.String)">
            <summary>
            用Base64进行加密,默认编码UTF8
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.Base64Code(System.String,System.Text.Encoding)">
            <summary>
            用Base64进行加密
            </summary>
            <param name="value"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.Base64DeCode(System.String,System.Text.Encoding)">
            <summary>
            用Base64进行解码
            </summary>
            <param name="value"></param>
            <param name="encode"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.Base64DeCode(System.String)">
            <summary>
            用Base64进行解码，默认编码UTF8
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.DES3Encrypt(System.String,System.String)">
            <summary>
            3DES加密算法
            </summary>
            <param name="strString">待加密串</param>
            <param name="strKey">加密的密钥key</param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.DES3Decrypt(System.String,System.String)">
            <summary>
            3DES解密算法
            </summary>
            <param name="strString">待加密串</param>
            <param name="strKey">加密的密钥key</param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.AESEncrypt(System.String,System.String)">
            <summary>
            256位AES加密
            </summary>
            <param name="toEncrypt"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.AESEncrypt(System.String)">
            <summary>
            256位AES加密，采用默认的Key
            </summary>
            <param name="toEncrypt"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.AESDecrypt(System.String,System.String)">
            <summary>
            256位AES解密
            </summary>
            <param name="toDecrypt"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.AESDecrypt(System.String)">
            <summary>
            256位AES解密，采用默认的key
            </summary>
            <param name="toDecrypt"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.HTMLEncode(System.Object)">
            <summary>
            对字串进行html转码
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.HTMLDecode(System.Object)">
            <summary>
            对字串进行html解码
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.UrlEncode(System.Object)">
            <summary>
            对字串进行url转码
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.UrlDecode(System.Object)">
            <summary>
            对字串进行url解码
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.ConvertToBinary(System.IO.Stream)">
            <summary>
            将流转化为二进制数据
            </summary>
            <param name="s">文件流</param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.ConvertToBinary(System.String)">
            <summary>
            将流转化为二进制数据
            </summary>
            <param name="filepath">文件流</param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.SaveToFile(System.Byte[],System.String)">
            <summary>
            将二进制数据存为文件
            </summary>
            <param name="bs"></param>
            <param name="savepath"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.SaveToFile(System.String,System.String)">
            <summary>
            将文本存为文件
            </summary>
            <param name="text"></param>
            <param name="savepath"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.SaveToFile(System.String,System.String,System.Text.Encoding)">
            <summary>
            将文本存为文件
            </summary>
            <param name="text"></param>
            <param name="savepath"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.GetCaller(System.Int32)">
            <summary>
            获取呼叫者的type
            </summary>
            <param name="offset">偏移量</param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.IsCaller(System.Type,System.Int32)">
            <summary>
            判断呼叫者的类型是否为指定类型
            </summary>
            <param name="t">待判定类型</param>
            <param name="offset">偏移量</param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.IsCaller(System.Type)">
            <summary>
            判断当前呼叫者是否为指定类型
            </summary>
            <param name="t">待判定类型</param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.FormatJSON(EFFC.Frame.Net.Base.Data.Base.FrameDLRObject)">
             <summary>
            格式化json格式
             </summary>
             <param name="json"></param>
             <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.FormatJSON(System.String)">
            <summary>
            格式化json格式
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.FormatJSON(System.String,System.String,EFFC.Frame.Net.Base.Data.Base.FrameDLRObject)">
            <summary>
            格式化json格式
            </summary>
            <param name="errorcode"></param>
            <param name="errormessage"></param>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.FormatJSON(System.String,System.String,System.String)">
            <summary>
            格式化json格式
            </summary>
            <param name="errorcode"></param>
            <param name="errormessage"></param>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.ComFunc.CopyDirectory(System.String,System.String,System.String[])">
            <summary>
            拷贝整个目录
            </summary>
            <param name="srcDir"></param>
            <param name="tgtDir"></param>
            <param name="includeext">如果指定则只拷贝指定的文件类型，否则拷贝全部文件</param>
        </member>
        <member name="T:EFFC.Frame.Net.Base.Data.Base.BaseCollection">
            <summary>
            构建框架使用的数据集（线程安全）
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.BaseCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.BaseCollection.SetValue_Inner(System.String,System.Object)">
            <summary>
            setvalue实现
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.BaseCollection.GetValue_Inner(System.String)">
            <summary>
            getvalue的实现
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.BaseCollection.Remove_Inner(System.String)">
            <summary>
            remove value的实现
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.BaseCollection.Clear_Inner">
            <summary>
            clear all的实现
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.BaseCollection.GetMyEnumerator">
            <summary>
            获取迭代器
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.BaseCollection.GetValue``1(System.String)">
            <summary>
            获取数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.BaseCollection.SetValue``1(System.String,``0)">
            <summary>
            写入数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.BaseCollection.GetValue(System.String)">
            <summary>
            获取数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.BaseCollection.SetValue(System.String,System.Object)">
            <summary>
            写入数据
            </summary>
            <param name="key">key</param>
            <param name="value">数据</param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.BaseCollection.Remove(System.String)">
            <summary>
            移除数据
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.BaseCollection.Clear">
            <summary>
            清空数据集
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.BaseCollection.GetValue(System.String,System.String)">
            <summary>
            获取数据
            </summary>
            <param name="domain">域</param>
            <param name="key">关键字</param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.BaseCollection.GetValue``2(System.String)">
            <summary>
            获取数据，通过数据转换器进行转换
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="E"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.BaseCollection.GetValue``2(System.String,System.String)">
            <summary>
            获取数据，通过数据转换器进行转换
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="E"></typeparam>
            <param name="domain"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.BaseCollection.SetValue(System.String,System.String,System.Object)">
            <summary>
            写入数据
            </summary>
            <param name="domain">域</param>
            <param name="key">key</param>
            <param name="value">数据</param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.BaseCollection.SetValue``2(System.String,``1)">
            <summary>
            写入数据
            </summary>
            <param name="key">key</param>
            <param name="value">数据</param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.BaseCollection.SetValue``2(System.String,System.String,``1)">
            <summary>
            写入数据
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="E"></typeparam>
            <param name="domain"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.BaseCollection.Domain(System.String)">
            <summary>
            抓取某个域下面的数据
            </summary>
            <param name="domain">域，要抓取多个域的话，每个域用逗号分隔</param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.BaseCollection.Clone">
            <summary>
            clone
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.BaseCollection.Clone``1">
            <summary>
            clone
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.BaseCollection.Remove(System.String,System.String)">
            <summary>
            删除value
            </summary>
            <param name="domain"></param>
            <param name="key"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.BaseCollection.DoSerialization(EFFC.Frame.Net.Base.Constants.SerializableType)">
            <summary>
            序列化
            </summary>
            <param name="st"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.BaseCollection.DeSerialization(EFFC.Frame.Net.Base.Constants.SerializableType)">
            <summary>
            反序列化
            </summary>
            <param name="st"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.BaseCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            序列化
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.BaseCollection.GetSchema">
            <summary>
            xml序列化
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.BaseCollection.ReadXml(System.Xml.XmlReader)">
            <summary>
            xml反序列化
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.BaseCollection.WriteXml(System.Xml.XmlWriter)">
            <summary>
            xml序列化
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.BaseCollection.GetEnumerator">
            <summary>
            可枚举循环
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.BaseCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            可枚举循环
            </summary>
            <returns></returns>
        </member>
        <member name="P:EFFC.Frame.Net.Base.Data.Base.BaseCollection.UUID">
            <summary>
            参数数据的唯一编号
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.Data.Base.BaseCollection.Keys_Inner">
            <summary>
            Keys
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.Data.Base.BaseCollection.Keys">
            <summary>
            Key数据集
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.Data.Base.BaseCollection.Item(System.String)">
            <summary>
            获取或设置数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:EFFC.Frame.Net.Base.Data.Base.BaseCollection.Item(System.String,System.String)">
            <summary>
            按照域获取或设置数据
            </summary>
            <param name="domain"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:EFFC.Frame.Net.Base.Data.Base.BaseCollection.ExtentionObj">
            <summary>
            扩展属性
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.MyDynamicMetaProvider.InvokeMe(System.String,System.Object[])">
            <summary>
            动态对象执行方法
            </summary>
            <param name="methodInfo"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.MyDynamicMetaProvider.InvokeDelegate0(System.String)">
            <summary>
            动态对象执行方法
            </summary>
            <param name="methodinfo"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.MyDynamicMetaProvider.InvokeDelegate1(System.String,System.Object)">
            <summary>
            动态对象执行方法
            </summary>
            <param name="methodinfo"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.MyDynamicMetaProvider.InvokeDelegate2(System.String,System.Object,System.Object)">
            <summary>
            动态对象执行方法
            </summary>
            <param name="methodinfo"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.MyDynamicMetaProvider.InvokeDelegate3(System.String,System.Object,System.Object,System.Object)">
            <summary>
            动态对象执行方法
            </summary>
            <param name="methodinfo"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.MyDynamicMetaProvider.InvokeDelegate4(System.String,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            动态对象执行方法
            </summary>
            <param name="methodinfo"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.MyDynamicMetaProvider.InvokeDelegate5(System.String,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            动态对象执行方法
            </summary>
            <param name="methodinfo"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.MyDynamicMetaProvider.InvokeDelegate6(System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            动态对象执行方法
            </summary>
            <param name="methodinfo"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.MyDynamicMetaProvider.InvokeDelegate7(System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            动态对象执行方法
            </summary>
            <param name="methodinfo"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.MyDynamicMetaProvider.InvokeDelegate8(System.String,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            动态对象执行方法
            </summary>
            <param name="methodinfo"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <param name="arg4"></param>
            <param name="arg5"></param>
            <param name="arg6"></param>
            <param name="arg7"></param>
            <param name="arg8"></param>
            <returns></returns>
        </member>
        <member name="T:EFFC.Frame.Net.Base.Data.FrameAppCache">
            <summary>
            框架默认的Cache,Application级别,介质为内存
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Interfaces.System.IFrameCache.Set(System.String,System.Object,System.DateTime)">
            <summary>
            设置绝对超时的时间的缓存
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="expira"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Interfaces.System.IFrameCache.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置过多长时间不用则超时
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="ts"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Interfaces.System.IFrameCache.Get(System.String)">
            <summary>
            获取缓存数据
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Interfaces.System.IFrameCache.Remove(System.String)">
            <summary>
            移除缓存
            </summary>
            <param name="key"></param>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Data.FrameAppCache.nextcleardatetime">
            <summary>
            下次清理缓存的时间
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Data.FrameAppCache.clearminutes">
            <summary>
            每个多少分钟清理一次缓存
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.FrameAppCache.Set(System.String,System.Object,System.DateTime)">
            <summary>
            新增数据，如果存在则更新,线程安全，到指定超时
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="expira"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.FrameAppCache.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            新增数据，如果存在则更新,线程安全,多长时间不用则超时
            </summary>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="slide"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.FrameAppCache.Get(System.String)">
            <summary>
            根据key获取数据，如果超时则返回null,线程安全
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.FrameAppCache.AutoRemoveValue">
            <summary>
            超时自动清理
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.FrameAppCache.Remove(System.String)">
            <summary>
            移除缓存,线程安全
            </summary>
            <param name="key"></param>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Data.FrameAppCache.CacheExpiraType.DateTime">
            <summary>
            绝对超时方式
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Data.FrameAppCache.CacheExpiraType.Slide">
            <summary>
            过多长时间不用则超时
            </summary>
        </member>
        <member name="T:EFFC.Frame.Net.Base.Exceptions.InvalidTypeException">
            <summary>
            无效类型异常
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Exceptions.InvalidTypeException.#ctor">
            <summary>
            Contructor
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Exceptions.InvalidTypeException.#ctor(System.String)">
            <summary>
            Contructor
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Module.HttpRemoteAsyncProxy`2.SetEncoding(System.Text.Encoding)">
            <summary>
            设置请求的Encode,默认为utf8
            </summary>
            <param name="encode"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Module.HttpRemoteAsyncProxy`2.SetRequestMethod(System.String)">
            <summary>
            设置请求的Method,默认为post
            </summary>
            <param name="request_method">post,get</param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Module.HttpRemoteAsyncProxy`2.SetContentType(System.String)">
            <summary>
            设置请求的Content type,默认为application/x-www-form-urlencoded
            </summary>
            <param name="content_type"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Module.HttpRemoteAsyncProxy`2.SetRequestURL(System.String)">
            <summary>
            设置请求的URL
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Module.HttpRemoteAsyncProxy`2.AddPostData(System.String,System.String)">
            <summary>
            添加post数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Module.HttpRemoteAsyncProxy`2.GetRequestInstance">
            <summary>
            獲得一個webrequest的實例
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Module.HttpRemoteAsyncProxy`2.GetPostDataString">
            <summary>
            獲得postdata的串
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Module.HttpRemoteAsyncProxy`2.EndCallModule(`0,`1)">
            <summary>
            结束处理-不做任何处理动作
            </summary>
            <param name="p"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Module.HttpRemoteAsyncProxy`2.WaitMe(`0,`1)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <param name="data"></param>
        </member>
        <member name="T:EFFC.Frame.Net.Base.ResouceManage.DB.DBExpress">
            <summary>
            数据库访问表达式解析器,将通用的json表达式解析为对应DB的sql或nonsql表达式
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Interfaces.Core.IResourceEntity.Release">
            <summary>
            每个资源都应该要进行资源释放
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.Interfaces.Core.IResourceEntity.ID">
            <summary>
            每个资源实例都有一个自己的UniCode
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Interfaces.Core.ITransaction.BeginTransaction(EFFC.Frame.Net.Base.Constants.FrameIsolationLevel)">
            <summary>
            开启事务处理
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Interfaces.Core.ITransaction.CommitTransaction">
            <summary>
            提交事务处理
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Interfaces.Core.ITransaction.RollbackTransaction">
            <summary>
            回滚事务处理
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.MongoAccess26.Count(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            select count
            </summary>
            <param name="collectionname"></param>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.MongoAccess26.Count(System.String,System.String)">
            <summary>
            select count
            </summary>
            <param name="collectionname"></param>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.MongoAccess26.Count(System.String,EFFC.Frame.Net.Base.Data.Base.FrameDLRObject)">
            <summary>
            select count
            </summary>
            <param name="collectionname"></param>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="P:EFFC.Frame.Net.Base.ResouceManage.DB.MongoAccess26.CurrentStatus">
            <summary>
            当前链接状态
            </summary>
        </member>
        <member name="T:EFFC.Frame.Net.Base.ResouceManage.DB.MongoExpress">
            <summary>
            mongo表达式解析
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.OracleExpress.GetParameterSerialno(System.String)">
            <summary>
            获取参数名称
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.OracleExpress.ConvertObject(System.Object)">
            <summary>
            将json中的特殊数据做转化
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.SqlServerExpress.GetParameterSerialno(System.String)">
            <summary>
            获取参数名称
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.SqlServerExpress.ConvertObject(System.Object)">
            <summary>
            将json中的特殊数据做转化
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="T:EFFC.Frame.Net.Base.ResouceManage.JsEngine.BaseHostJsObject">
            <summary>
            Host Js的扩展对象
            可用于获取扩展对象的反射结构
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.ResouceManage.JsEngine.BaseHostJsObject.Description">
            <summary>
            对象作用描述
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.ResouceManage.JsEngine.BaseHostJsObject.Name">
            <summary>
            对象名称,作为hostjs中对象的访问名称
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.ResouceManage.JsEngine.BaseHostJsObject.Properties">
            <summary>
            获取属性
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.ResouceManage.JsEngine.BaseHostJsObject.Functions">
            <summary>
            获取所有方法的定义
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.ResouceManage.JsEngine.BaseHostJsObject.ConstructorDesc">
            <summary>
            获取整个对象结构的描述
            </summary>
        </member>
        <member name="T:EFFC.Frame.Net.Base.ResouceManage.JsEngine.HostJs">
            <summary>
            宿主Js引擎
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.JsEngine.HostJs.Evaluate(System.String,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            運行腳本
            </summary>
            <param name="script">string</param>
            <param name="kvp"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.JsEngine.HostJs.GetOutObject(System.String)">
            <summary>
            獲取輸出參數
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.JsEngine.HostJs.Release">
            <summary>
            资源释放
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.ResouceManage.JsEngine.HostJs.IsRelease">
            <summary>
            判定资源是否已经释放
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.ResouceManage.JsEngine.HostJs.ReserveKeys">
            <summary>
            Js的保留关键字
            </summary>
        </member>
        <member name="T:EFFC.Frame.Net.Base.Common.MyConfig">
            <summary>
            Frame config
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.MyConfig.GetConnections(System.String)">
            <summary>
            獲取connectionStrings中的配置數據
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.MyConfig.GetConfiguration(System.String)">
            <summary>
            取得appSettings裏的值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.MyConfig.GetConfigurationByEncrypt(System.String)">
            <summary>
            取得appSettings裏的值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.MyConfig.GetConfigurationByEncrypt(System.String,EFFC.Frame.Net.Base.Common.MyConfig.EncryptionType)">
            <summary>
            取得appSettings裏的值
            </summary>
            <param name="key"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.MyConfig.GetWebConnectionString(System.String)">
            <summary>
            取得WebConnectionString裏的值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.MyConfig.GetWebDBConnStringByEncrypt(System.String)">
            <summary>
            取得Webconfig裏DBConnstring的值，Password和userid采用base64加密
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.MyConfig.GetWebDBConnStringByEncrypt(System.String,EFFC.Frame.Net.Base.Common.MyConfig.EncryptionType)">
            <summary>
            取得Webconfig裏DBConnstring的值，Password和userid采用指定類型的方式加密
            </summary>
            <param name="key"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.MyConfig.GetDBConnStringByEncrypt(System.String)">
            <summary>
            取得appSettings裏DBConnstring的值，Password和userid采用Base64加密
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.MyConfig.GetDBConnStringByEncrypt(System.String,EFFC.Frame.Net.Base.Common.MyConfig.EncryptionType)">
            <summary>
            取得appSettings裏DBConnstring的值，Password和userid采用指定類型的方式加密
            </summary>
            <param name="key"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.MyConfig.GetConfigurationList(System.String)">
            <summary>
            取得appSettings裏的值列表
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.MyConfig.GetConfigurationList">
            <summary>
            取得appSettings裏的值列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.MyConfig.SetConfiguration(System.String,System.String,System.String)">
            
            <summary>
            設置appSetting的值
            </summary>
            <param name="key">鍵</param>
            <param name="value">值</param>
            <param name="filePath">App.config檔路徑</param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Common.MyConfig.SetConfiguration(System.String,System.String)">
            
            <summary>
            設置appSetting的值
            </summary>
            <param name="key">鍵</param>
            <param name="value">值</param>
        </member>
        <member name="T:EFFC.Frame.Net.Base.Common.MyConfig.EncryptionType">
            <summary>
            加密类型
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Common.MyConfig.EncryptionType.Base64">
            <summary>
            Base64
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Common.MyConfig.EncryptionType.AES256">
            <summary>
            AES256
            </summary>
        </member>
        <member name="T:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType">
            <summary>
            各种文件类型对应的Content Type
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.ai">
            <summary>
            application/postscript
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.aif">
            <summary>
            audio/x-aiff
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.aifc">
            <summary>
            audio/x-aiff
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.aiff">
            <summary>
            audio/x-aiff
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.asc">
            <summary>
            text/plain
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.au">
            <summary>
            audio/basic
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.avi">
            <summary>
            video/x-msvideo
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.bcpio">
            <summary>
            application/x-bcpio
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.bin">
            <summary>
            application/octet-stream
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.bmp">
            <summary>
            image/bmp
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.cdf">
            <summary>
            application/x-netcdf
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.cpio">
            <summary>
            application/x-cpio
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.cpt">
            <summary>
            application/mac-compactpro
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.csh">
            <summary>
            application/x-csh
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.css">
            <summary>
            text/css
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.dcr">
            <summary>
            application/x-director
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.djv">
            <summary>
            image/vnd.djvu
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.djvu">
            <summary>
            image/vnd.djvu
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.dll">
            <summary>
            application/octet-stream
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.dms">
            <summary>
            application/octet-stream
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.doc">
            <summary>
            application/msword
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.dvi">
            <summary>
            
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.dxr">
            <summary>
            application/x-director
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.eps">
            <summary>
            application/postscript
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.etx">
            <summary>
            text/x-setext
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.exe">
            <summary>
            application/octet-stream
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.ez">
            <summary>
            application/andrew-inset
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.gif">
            <summary>
            image/gif
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.gtar">
            <summary>
            application/x-gtar
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.hdf">
            <summary>
            application/x-hdf
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.hqx">
            <summary>
            application/mac-binhex40
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.htm">
            <summary>
            text/html
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.html">
            <summary>
            text/html
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.ice">
            <summary>
            x-conference/x-cooltalk
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.ief">
            <summary>
            image/ief
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.iges">
            <summary>
            model/iges
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.igs">
            <summary>
            model/iges
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.jpe">
            <summary>
            image/jpeg
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.jpeg">
            <summary>
            image/jpeg
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.jpg">
            <summary>
            image/jpeg
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.js">
            <summary>
            application/x-javascript
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.kar">
            <summary>
            audio/midi
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.latex">
            <summary>
            application/x-latex
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.lha">
            <summary>
            application/octet-stream
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.lzh">
            <summary>
            application/octet-stream
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.m3u">
            <summary>
            audio/x-mpegurl
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.man">
            <summary>
            application/x-troff-man
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.me">
            <summary>
            application/x-troff-me
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.mesh">
            <summary>
            model/mesh
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.mid">
            <summary>
            audio/midi
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.midi">
            <summary>
            audio/midi
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.mif">
            <summary>
            application/vnd.mif
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.mov">
            <summary>
            video/quicktime
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.movie">
            <summary>
            video/x-sgi-movie
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.mp2">
            <summary>
            audio/mpeg
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.mp3">
            <summary>
            audio/mpeg
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.mpe">
            <summary>
            video/mpeg
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.mpeg">
            <summary>
            video/mpeg
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.mpg">
            <summary>
            video/mpeg
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.mpga">
            <summary>
            audio/mpeg
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.ms">
            <summary>
            application/x-troff-ms
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.msh">
            <summary>
            model/mesh
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.mxu">
            <summary>
            video/vnd.mpegurl
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.nc">
            <summary>
            application/x-netcdf
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.oda">
            <summary>
            application/oda
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.pbm">
            <summary>
            image/x-portable-bitmap
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.pdb">
            <summary>
            chemical/x-pdb
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.pdf">
            <summary>
            application/pdf
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.pgm">
            <summary>
            image/x-portable-graymap
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.pgn">
            <summary>
            application/x-chess-pgn
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.png">
            <summary>
            image/png
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.pnm">
            <summary>
            image/x-portable-anymap
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.ppm">
            <summary>
            image/x-portable-pixmap
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.ppt">
            <summary>
            application/vnd.ms-powerpoint
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.ps">
            <summary>
            application/postscript
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.qt">
            <summary>
            video/quicktime
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.ra">
            <summary>
            audio/x-realaudio
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.ram">
            <summary>
            audio/x-pn-realaudio
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.ras">
            <summary>
            image/x-cmu-raster
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.rgb">
            <summary>
            image/x-rgb
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.rm">
            <summary>
            audio/x-pn-realaudio
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.roff">
            <summary>
            application/x-troff
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.rpm">
            <summary>
            audio/x-pn-realaudio-plugin
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.rtf">
            <summary>
            text/rtf
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.rtx">
            <summary>
            text/richtext
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.sgm">
            <summary>
            text/sgml
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.sgml">
            <summary>
            text/sgml
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.sh">
            <summary>
            application/x-sh
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.shar">
            <summary>
            application/x-shar
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.silo">
            <summary>
            model/mesh
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.sit">
            <summary>
            application/x-stuffit
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.skd">
            <summary>
            application/x-koan
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.skm">
            <summary>
            application/x-koan
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.skp">
            <summary>
            application/x-koan
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.skt">
            <summary>
            application/x-koan
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.smi">
            <summary>
            application/smil
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.smil">
            <summary>
            application/smil
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.snd">
            <summary>
            audio/basic
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.so">
            <summary>
            application/octet-stream
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.spl">
            <summary>
            application/x-futuresplash
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.src">
            <summary>
            application/x-wais-source
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.sv4cpio">
            <summary>
            application/x-sv4cpio
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.sv4crc">
            <summary>
            application/x-sv4crc
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.swf">
            <summary>
            application/x-shockwave-flash
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.t">
            <summary>
            application/x-troff
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.tar">
            <summary>
            application/x-tar
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.tcl">
            <summary>
            application/x-tcl
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.tex">
            <summary>
            application/x-tex
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.texi">
            <summary>
            application/x-texinfo
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.texinfo">
            <summary>
            application/x-texinfo
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.tif">
            <summary>
            image/tiff
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.tiff">
            <summary>
            image/tiff
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.tr">
            <summary>
            application/x-troff
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.tsv">
            <summary>
            text/tab-separated-values
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.txt">
            <summary>
            text/plain
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.ustar">
            <summary>
            application/x-ustar
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.vcd">
            <summary>
            application/x-cdlink
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.vrml">
            <summary>
            model/vrml
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.wav">
            <summary>
            audio/x-wav
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.wbmp">
            <summary>
            image/vnd.wap.wbmp
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.wbxml">
            <summary>
            application/vnd.wap.wbxml
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.wml">
            <summary>
            text/vnd.wap.wml
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.wmlc">
            <summary>
            application/vnd.wap.wmlc
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.wmls">
            <summary>
            text/vnd.wap.wmlscript
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.wmlsc">
            <summary>
            application/vnd.wap.wmlscriptc
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.wrl">
            <summary>
            model/vrml
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.xbm">
            <summary>
            image/x-xbitmap
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.xht">
            <summary>
            application/xhtml+xml
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.xhtml">
            <summary>
            application/xhtml+xml
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.xls">
            <summary>
            application/vnd.ms-excel
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.xml">
            <summary>
            text/xml
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.xpm">
            <summary>
            image/x-xpixmap
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.xsl">
            <summary>
            text/xml
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.json">
            <summary>
            text/json
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.xwd">
            <summary>
            image/x-xwindowdump
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.xyz">
            <summary>
            chemical/x-xyz
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.zip">
            <summary>
            application/zip
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.dotx">
            <summary>
            application/vnd.openxmlformats-officedocument.wordprocessingml.template
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.pptx">
            <summary>
            application/vnd.openxmlformats-officedocument.presentationml.presentation
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.ppsx">
            <summary>
            application/vnd.openxmlformats-officedocument.presentationml.slideshow
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.potx">
            <summary>
            application/vnd.openxmlformats-officedocument.presentationml.template
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.xlsx">
            <summary>
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ResponseHeader_ContentType.xltx">
            <summary>
            application/vnd.openxmlformats-officedocument.presentationml.template
            </summary>
        </member>
        <member name="T:EFFC.Frame.Net.Base.Constants.PostBackActionKey">
            <summary>
            Post Back事件actionname的定义
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.PostBackActionKey.POST_BACK_EVENT">
            <summary>
            请求回调-事件
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.PostBackActionKey.POST_BACK_DATA_CHANGE">
            <summary>
            请求回调-数据变化
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.PostBackActionKey.LOAD">
            <summary>
            Load
            </summary>
        </member>
        <member name="T:EFFC.Frame.Net.Base.Constants.ParameterKey">
            <summary>
            系统会用到的公共参数键，提供全局共享使用，自身独有的则不在此列
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ParameterKey.RESOURCE_MANAGER">
            <summary>
            资源管理器
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ParameterKey.TOKEN">
            <summary>
            事务toke
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ParameterKey.DBCONNECT_STRING">
            <summary>
            默认DB连接串
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ParameterKey.NONSQL_DBCONNECT_STRING">
            <summary>
            非sql型db的默认链接串
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ParameterKey.LOGIC">
            <summary>
            逻辑名称
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ParameterKey.ACTION">
            <summary>
            行为名称
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ParameterKey.RESPONSE_DATA">
            <summary>
            响应的结果数据，不仅仅只用于web，也可表示处理后的结果数据
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.ParameterKey.CONTENT_TYPE">
            <summary>
            响应的内容类型，响应的数据做格式化返回的依据，不仅仅只用于web，也可表示处理后的结果数据类型
            </summary>
        </member>
        <member name="T:EFFC.Frame.Net.Base.Constants.DomainKey">
            <summary>
            系统会用到的公共域名，提供全局共享使用，自身独有的则不在此列
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.DomainKey.CONFIG">
            <summary>
            配置档
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.DomainKey.INPUT_PARAMETER">
            <summary>
            输入参数
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.DomainKey.CUSTOMER_PARAMETER">
            <summary>
            自定义参数
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.DomainKey.SESSION">
            <summary>
            session参数
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.DomainKey.QUERY_STRING">
            <summary>
            querystring参数
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.DomainKey.POST_DATA">
            <summary>
            postdata参数
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.DomainKey.UPDATE_FILE">
            <summary>
            上传文件
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.DomainKey.APPLICATION_ENVIRONMENT">
            <summary>
            应用环境参量
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.DomainKey.VIEW_LIST">
            <summary>
            view需要用到的数据域
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.DomainKey.APPLICATION">
            <summary>
            应用级域
            </summary>
        </member>
        <member name="T:EFFC.Frame.Net.Base.Constants.HostJsConstants">
            <summary>
            host js架构涉及到的常量参数
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.HostJsConstants.COMPILED_ROOT_PATH">
            <summary>
            编译好的js的存放根路径
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.HostJsConstants.VIEW_PATH">
            <summary>
            View的存放路径
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.HostJsConstants.LOGIC_PATH">
            <summary>
            logic的存放路径
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.HostJsConstants.COMPILED_VIEW_PATH">
            <summary>
            编译好的View的js存放路径
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.HostJsConstants.COMPILED_LOGIC_PATH">
            <summary>
            编译好的Logic的js存放路径
            </summary>
        </member>
        <member name="T:EFFC.Frame.Net.Base.Constants.SerializableType">
            <summary>
            序列化类型
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.SerializableType.Binary">
            <summary>
            二进制序列化
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.SerializableType.Xml">
            <summary>
            xml序列化
            </summary>
        </member>
        <member name="T:EFFC.Frame.Net.Base.Constants.GoResponseDataType">
            <summary>
            Go请求下的响应数据类型
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.GoResponseDataType.NONE">
            <summary>
            无指定类型，系统会将返回结果集直接response掉
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.GoResponseDataType.Json">
            <summary>
            Json
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.GoResponseDataType.HTML">
            <summary>
            Html
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.GoResponseDataType.String">
            <summary>
            字符串
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.GoResponseDataType.Pic_Jpg">
            <summary>
            Jpg图片
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.GoResponseDataType.Pic_Bmp">
            <summary>
            Bmp图片
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.GoResponseDataType.Pic_Gif">
            <summary>
            Gif图片
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.GoResponseDataType.Pic_png">
            <summary>
            png图片
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.GoResponseDataType.Excel">
            <summary>
            Excel
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.GoResponseDataType.Word">
            <summary>
            Word
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.GoResponseDataType.PDF">
            <summary>
            PDF
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.GoResponseDataType.HostView">
            <summary>
            HostView
            </summary>
        </member>
        <member name="T:EFFC.Frame.Net.Base.Constants.LoggerLevel">
            <summary>
            Log Level
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.LoggerLevel.DEBUG">
            <summary>
            Debug
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.LoggerLevel.INFO">
            <summary>
            Info
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.LoggerLevel.WARN">
            <summary>
            Warning
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.LoggerLevel.ERROR">
            <summary>
            Error
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.LoggerLevel.FATAL">
            <summary>
            Fatal error
            </summary>
        </member>
        <member name="T:EFFC.Frame.Net.Base.Constants.DBStatus">
            <summary>
            DB状态
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.DBStatus.Open">
            <summary>
            开启
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.DBStatus.Close">
            <summary>
            关闭
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.DBStatus.Begin_Trans">
            <summary>
            开启事务
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.DBStatus.Commit_Trans">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.DBStatus.RollBack_Trans">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.DBStatus.Empty">
            <summary>
            空
            </summary>
        </member>
        <member name="T:EFFC.Frame.Net.Base.Constants.StateDefine">
            <summary>
            状态定义，Rule专用
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.StateDefine.Start">
            <summary>
            开始
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.StateDefine.Processing">
            <summary>
            处理中
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.StateDefine.End">
            <summary>
            结束
            </summary>
        </member>
        <member name="T:EFFC.Frame.Net.Base.Constants.FrameDLRFlags">
            <summary>
            Frame动态对象控制标记
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.FrameDLRFlags.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.FrameDLRFlags.SensitiveCase">
            <summary>
            敏感大小写
            </summary>
        </member>
        <member name="T:EFFC.Frame.Net.Base.Constants.FrameIsolationLevel">
            <summary>
            Transaction隔离级别
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.FrameIsolationLevel.Default">
            <summary>
            默认级别，由各个事务自定决定
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.FrameIsolationLevel.Unspecified">
            <summary>
            正在使用与指定隔离级别不同的隔离级别，但是无法确定该级别。
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.FrameIsolationLevel.Chaos">
            <summary>
            无法覆盖隔离级别更高的事务中的挂起的更改。
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.FrameIsolationLevel.ReadUncommitted">
            <summary>
            可以进行脏读，意思是说，不发布共享锁，也不接受独占锁。
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.FrameIsolationLevel.ReadCommitted">
            <summary>
            在正在读取数据时保持共享锁，以避免脏读，但是在事务结束之前可以更改数据，从而导致不可重复的读取或幻像数据。
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.FrameIsolationLevel.RepeatableRead">
            <summary>
            在查询中使用的所有数据上放置锁，以防止其他用户更新这些数据。 防止不可重复的读取，但是仍可以有幻像行。
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.FrameIsolationLevel.Serializable">
            <summary>
            在 System.Data.DataSet 上放置范围锁，以防止在事务完成之前由其他用户更新行或向数据集中插入行。
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.FrameIsolationLevel.Snapshot">
            <summary>
            通过在一个应用程序正在修改数据时存储另一个应用程序可以读取的相同数据版本来减少阻止。 表示您无法从一个事务中看到在其他事务中进行的更改，即便重新查询也是如此。
            </summary>
        </member>
        <member name="T:EFFC.Frame.Net.Base.Constants.FlowStateType">
            <summary>
            流程状态
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.FlowStateType.None">
            <summary>
            无效状态
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.FlowStateType.Ready">
            <summary>
            准备执行
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.FlowStateType.Suspend">
            <summary>
            中断，挂起
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Constants.FlowStateType.End">
            <summary>
            结束
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataSetStd.GetValue(System.Int32,System.String,System.Int32)">
            <summary>
            根据columnName和rowIndex获取指定table中的值
            </summary>
            <param name="tableIndex"></param>
            <param name="columnName"></param>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataSetStd.GetValueByWhere(System.Int32,System.String,System.String)">
            <summary>
            根据过滤条件获得指定栏位的值，如果过滤条件不够精确导致得到的结果过多，将抛出异常
            </summary>
            <param name="tableIndex"></param>
            <param name="columnName"></param>
            <param name="filterExpression"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataSetStd.GetValue(System.Int32,System.Int32,System.Int32)">
            <summary>
            根据columnIndex和rowIndex获取指定table中的值
            </summary>
            <param name="tableIndex"></param>
            <param name="columnIndex"></param>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataSetStd.GetValueByWhere(System.Int32,System.Int32,System.String)">
            <summary>
            根据过滤条件获得指定栏位的值，如果过滤条件不够精确导致得到的结果过多，将抛出异常
            </summary>
            <param name="tableIndex"></param>
            <param name="columnIndex"></param>
            <param name="filterExpression"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataSetStd.GetValue(System.String,System.Int32)">
            <summary>
            根据columnName和rowIndex获取第一个table中的值
            </summary>
            <param name="columnName"></param>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataSetStd.GetValueByWhere(System.String,System.String)">
            <summary>
            根据过滤条件获得指定栏位的值，如果过滤条件不够精确导致得到的结果过多，将抛出异常
            </summary>
            <param name="columnName"></param>
            <param name="filterExpression"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataSetStd.GetValue(System.Int32,System.Int32)">
            <summary>
            根据columnIndex和rowIndex获取第一个table中的值
            </summary>
            <param name="columnIndex"></param>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataSetStd.GetValueByWhere(System.Int32,System.String)">
            <summary>
             根据过滤条件获得指定栏位的值，如果过滤条件不够精确导致得到的结果过多，将抛出异常
            </summary>
            <param name="columnIndex"></param>
            <param name="filterExpression"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataTableStd.GetColumnParamDefine">
            <summary>
            獲得Column的結構
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataTableStd.ColumnMaxLength(System.String)">
            <summary>
            返回指定欄位的內容的MaxLength
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataTableStd.ColumnMaxLength(System.Int32)">
            <summary>
            返回指定欄位的内容的MaxLength
            </summary>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataTableStd.ColumnDateType(System.String)">
            <summary>
            返回指定欄位的数据类型
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataTableStd.ColumnDateType(System.Int32)">
            <summary>
            返回指定欄位的数据类型
            </summary>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataTableStd.AddColumn(EFFC.Frame.Net.Base.Parameter.ColumnP)">
            <summary>
            添加列，V1.0.0.1
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataTableStd.isAutoIncrement(System.Int32)">
            <summary>
            判断欄位是否为自增长
            </summary>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataTableStd.isAutoIncrement(System.String)">
            <summary>
            判断欄位是否为自增长
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataTableStd.SetValue(System.Object,System.String,System.Int32)">
            <summary>
            在指定的位置設置值
            </summary>
            <param name="value"></param>
            <param name="columnName"></param>
            <param name="rowIndex"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataTableStd.SetValue(System.Object,System.Int32,System.Int32)">
            <summary>
            在指定的位置設置值
            </summary>
            <param name="value"></param>
            <param name="columnIndex"></param>
            <param name="rowIndex"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataTableStd.SetValueApppend_From(EFFC.Frame.Net.Base.Data.DataTableStd)">
            <summary>
            将from表中的数据写入到本表中，按照欄位名稱对应，Append方式
            </summary>
            <param name="from"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataTableStd.SetValueByColumn(System.Object,System.String)">
            <summary>
            给指定的列赋值-所有行
            </summary>
            <param name="value"></param>
            <param name="columnName"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataTableStd.SetValueByColumn(System.Object,System.Int32)">
            <summary>
            给指定的列赋值-所有行
            </summary>
            <param name="value"></param>
            <param name="columnIndex"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataTableStd.GetValue(System.String,System.Int32)">
            <summary>
            根據columnName和rowIndex獲取值
            </summary>
            <param name="columnName"></param>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataTableStd.GetValueByWhere(System.String,System.String)">
            <summary>
            根據过滤条件獲得指定欄位的值，如果过滤条件不够精确导致得到的结果过多，将抛出异常
            </summary>
            <param name="columnName"></param>
            <param name="filterExpression"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataTableStd.GetValue(System.Int32,System.Int32)">
            <summary>
            根據columnName和rowIndex獲取值
            </summary>
            <param name="columnIndex"></param>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataTableStd.GetValueByWhere(System.Int32,System.String)">
            <summary>
            根據过滤条件獲得指定欄位的值，如果过滤条件不够精确导致得到的结果过多，将抛出异常
            </summary>
            <param name="columnIndex"></param>
            <param name="filterExpression"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataTableStd.NewRow">
            <summary>
            新增一個臨時行
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataTableStd.SetNewRowValue(System.Object,System.String)">
            <summary>
            給新增行寫值
            </summary>
            <param name="value"></param>
            <param name="columnName"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataTableStd.SetNewRowValue(System.Object,System.Int32)">
            <summary>
            給新增行寫值
            </summary>
            <param name="value"></param>
            <param name="columnIndex"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataTableStd.GetNewRowValue(System.String)">
            <summary>
            獲取临时新增行的数据
            </summary>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataTableStd.GetNewRowValue(System.Int32)">
            <summary>
            獲取临时新增行的数据
            </summary>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataTableStd.AddNewRow">
            <summary>
            將新增的臨時行Add到table中
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataTableStd.GetPK(System.Data.DataTable)">
            <summary>
            獲得该表的PK，dt必须带schema
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataTableStd.GetPKName(System.Data.DataTable)">
            <summary>
            獲得该表的PK的名稱列表，dt必须带schema
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataTableStd.GetColumnName(System.Data.DataTable)">
            <summary>
            獲得该表的Columns的名稱列表
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataTableStd.RowNumber(System.Data.DataTable)">
            <summary>
            找出Dt中RowCount
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataTableStd.CloneStd">
            <summary>
            复制本表的结构
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataTableStd.IsExist(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            根據columns搜索与values中相同的数据，判断是否存在
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataTableStd.CloneDataRow(System.Int32,System.Data.DataTable@)">
            <summary>
            clone一個DataRow
            </summary>
            <param name="rowindex"></param>
            <param name="todt"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataTableStd.CloneDataRow(System.Int32,EFFC.Frame.Net.Base.Data.DataTableStd@)">
            <summary>
            clone一個DataRow
            </summary>
            <param name="rowindex"></param>
            <param name="todt"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataTableStd.SelectByWhere(System.String)">
            <summary>
            根據条件表达式找出需要的数据并返回
            </summary>
            <param name="filterExpresstion"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataTableStd.SelectByWhere(System.String,System.String)">
            <summary>
            根據条件表达式找出需要的数据并返回
            </summary>
            <param name="filterExpresstion"></param>
            <param name="sort"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataTableStd.ParseStd(System.Object)">
            <summary>
            转化成标准类型
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataTableStd.ParseStd(System.Data.DataTable)">
            <summary>
            转化成标准类型
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataTableStd.ParseStd(System.Int32)">
            <summary>
            根據指定column个数转化成标准类型
            </summary>
            <param name="columnCount"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataTableStd.ParseStd(System.String[])">
            <summary>
            根據指定columns转化成标准类型
            </summary>
            <param name="columns"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataTableStd.ToString(System.String,System.Int32)">
            <summary>
            将table中的指定一行的数据转化成字符串
            </summary>
            <param name="splitComm"></param>
            <param name="rowIndex"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataTableStd.HeaderToString(System.String)">
            <summary>
            将table中的Header转化成字符串
            </summary>
            <param name="splitComm"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataTableStd.ToString(System.String,System.Boolean)">
            <summary>
            将table中的数据转化成字符串（数据量大的时候不建议使用）
            </summary>
            <param name="splitComm"></param>
            <param name="isIncHeader"></param>
            <returns></returns>
        </member>
        <member name="P:EFFC.Frame.Net.Base.Data.DataTableStd.Item(System.Int32,System.String)">
            <summary>
            獲取或者設置值
            </summary>
            <param name="x">行</param>
            <param name="y">列</param>
            <returns></returns>
        </member>
        <member name="P:EFFC.Frame.Net.Base.Data.DataTableStd.Item(System.Int32,System.Int32)">
            <summary>
            獲取或者設置值
            </summary>
            <param name="x">行</param>
            <param name="y">列</param>
            <returns></returns>
        </member>
        <member name="P:EFFC.Frame.Net.Base.Data.DataTableStd.RowLength">
            <summary>
            本表的行數
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DateTimeStd.#ctor">
            <summary>
            Constuctor
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DateTimeStd.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            COnstuctor
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <param name="day"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DateTimeStd.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constuctor
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <param name="day"></param>
            <param name="hour"></param>
            <param name="minute"></param>
            <param name="second"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DateTimeStd.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constuctor
            </summary>
            <param name="year"></param>
            <param name="month"></param>
            <param name="day"></param>
            <param name="hour"></param>
            <param name="minute"></param>
            <param name="second"></param>
            <param name="millisecond"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DateTimeStd.#ctor(System.DateTime)">
            <summary>
            Constuctor
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DateTimeStd.#ctor(System.Nullable{System.DateTime})">
            <summary>
            Constuctor
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DateTimeStd.Equals(System.Object)">
            <summary>
            Equal
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DateTimeStd.GetHashCode">
            <summary>
            hashcode
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DateTimeStd.op_Implicit(System.DateTime)~EFFC.Frame.Net.Base.Data.DateTimeStd">
            <summary>
            隐式转换
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DateTimeStd.op_Implicit(EFFC.Frame.Net.Base.Data.DateTimeStd)~System.DateTime">
            <summary>
            隐式转换
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DateTimeStd.GetDaysOfMonth(System.DateTime)">
            <summary>
            獲取指定日期當前月份的總天數
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DateTimeStd.AddMilliseconds(System.Double)">
            <summary>
            將指定的毫秒數加入至這個執行個體的值。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DateTimeStd.AddSeconds(System.Double)">
            <summary>
            將指定的秒數加入至這個執行個體的值。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DateTimeStd.AddMinutes(System.Double)">
            <summary>
            將指定的分钟数加入至這個執行個體的值。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DateTimeStd.AddHours(System.Double)">
            <summary>
            將指定的小时数加入至這個執行個體的值。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DateTimeStd.AddDays(System.Double)">
            <summary>
            將指定的天数加入至這個執行個體的值。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DateTimeStd.AddWeeks(System.Double)">
            <summary>
            將指定的周数加入至這個執行個體的值。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DateTimeStd.AddMonths(System.Double)">
            <summary>
            將指定的月数加入至這個執行個體的值。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DateTimeStd.AddQuarter(System.Double)">
            <summary>
            將指定的季数加入至這個執行個體的值。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DateTimeStd.AddYears(System.Double)">
            <summary>
            將指定的年数加入至這個執行個體的值。
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DateTimeStd.DayDiff(EFFC.Frame.Net.Base.Data.DateTimeStd,EFFC.Frame.Net.Base.Data.DateTimeStd)">
            <summary>
            dt1-dt2的天数
            </summary>
            <param name="dt1"></param>
            <param name="dt2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DateTimeStd.op_Addition(EFFC.Frame.Net.Base.Data.DateTimeStd,System.TimeSpan)">
            <summary>
            +運算
            </summary>
            <param name="o1"></param>
            <param name="ts"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DateTimeStd.op_Addition(EFFC.Frame.Net.Base.Data.DateTimeStd,System.Double)">
            <summary>
            +運算：天数
            </summary>
            <param name="o1"></param>
            <param name="days"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DateTimeStd.op_Subtraction(EFFC.Frame.Net.Base.Data.DateTimeStd,EFFC.Frame.Net.Base.Data.DateTimeStd)">
            <summary>
            -運算
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DateTimeStd.op_Subtraction(EFFC.Frame.Net.Base.Data.DateTimeStd,System.Double)">
            <summary>
            -運算：天数
            </summary>
            <param name="o1"></param>
            <param name="days"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DateTimeStd.op_Equality(EFFC.Frame.Net.Base.Data.DateTimeStd,EFFC.Frame.Net.Base.Data.DateTimeStd)">
            <summary>
            ==判斷
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DateTimeStd.op_Inequality(EFFC.Frame.Net.Base.Data.DateTimeStd,EFFC.Frame.Net.Base.Data.DateTimeStd)">
            <summary>
            !=判斷
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DateTimeStd.op_GreaterThanOrEqual(EFFC.Frame.Net.Base.Data.DateTimeStd,EFFC.Frame.Net.Base.Data.DateTimeStd)">
            <summary>
            >=判斷
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DateTimeStd.op_LessThanOrEqual(EFFC.Frame.Net.Base.Data.DateTimeStd,EFFC.Frame.Net.Base.Data.DateTimeStd)">
            <summary>
            小于等于判斷
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DateTimeStd.op_GreaterThan(EFFC.Frame.Net.Base.Data.DateTimeStd,EFFC.Frame.Net.Base.Data.DateTimeStd)">
            <summary>
            >判斷
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DateTimeStd.op_LessThan(EFFC.Frame.Net.Base.Data.DateTimeStd,EFFC.Frame.Net.Base.Data.DateTimeStd)">
            <summary>
            小于判斷
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DateTimeStd.ParseStd(System.Object)">
            <summary>
            转换成DateTimeStd
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DateTimeStd.ParseStd(System.Object,System.String)">
            <summary>
            转换成DateTimeStd
            </summary>
            <param name="o"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DateTimeStd.ParseStd(System.Object,System.String[])">
            <summary>
            转换成DateTimeStd
            </summary>
            <param name="o"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DateTimeStd.IsDateTime(System.Object)">
            <summary>
            DateTime判斷
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DateTimeStd.IsDateTime(System.Object,System.String)">
            <summary>
            DateTime判斷
            </summary>
            <param name="o"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DateTimeStd.IsDateTime(System.Object,System.String[])">
            <summary>
            DateTime判斷
            </summary>
            <param name="o"></param>
            <param name="formats"></param>
            <returns></returns>
        </member>
        <member name="P:EFFC.Frame.Net.Base.Data.DateTimeStd.Now">
            <summary>
            当前时间
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.Data.DateTimeStd.DayOfMonth">
            <summary>
            當前月份的總天數
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.Data.DateTimeStd.MingGuoYear">
            <summary>
            民国年
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.Data.DateTimeStd.MingGuoYearforChinese">
            <summary>
            转化为民国格式
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.#ctor">
            <summary>
            default construct
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.#ctor(System.Decimal)">
            <summary>
            constructor with default value
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.#ctor(System.Nullable{System.Decimal})">
            <summary>
            constructor with default object
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_Implicit(EFFC.Frame.Net.Base.Data.DecimalStd)~System.Decimal">
            <summary>
            隱含轉換成decimal
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_Explicit(EFFC.Frame.Net.Base.Data.DecimalStd)~System.Single">
            <summary>
            強轉成float類型
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_Explicit(EFFC.Frame.Net.Base.Data.DecimalStd)~System.Double">
            <summary>
            強轉成double類型
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_Implicit(System.Single)~EFFC.Frame.Net.Base.Data.DecimalStd">
            <summary>
            隱含轉換成decimalStd類型
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_Implicit(System.Double)~EFFC.Frame.Net.Base.Data.DecimalStd">
            <summary>
            隱含轉換成decimalStd類型
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_Implicit(System.Int32)~EFFC.Frame.Net.Base.Data.DecimalStd">
            <summary>
            隱含轉換成decimalStd類型
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_Implicit(System.Decimal)~EFFC.Frame.Net.Base.Data.DecimalStd">
            <summary>
            隱含轉換成decimalStd類型
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_UnaryPlus(EFFC.Frame.Net.Base.Data.DecimalStd)">
            <summary>
            正號運算
            </summary>
            <param name="o1"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_Addition(EFFC.Frame.Net.Base.Data.DecimalStd,EFFC.Frame.Net.Base.Data.DecimalStd)">
            <summary>
            加運算
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_Addition(EFFC.Frame.Net.Base.Data.DecimalStd,System.Decimal)">
            <summary>
            加運算
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_Addition(EFFC.Frame.Net.Base.Data.DecimalStd,System.Int32)">
            <summary>
            加運算
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_Addition(EFFC.Frame.Net.Base.Data.DecimalStd,System.Single)">
            <summary>
            加運算
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_Addition(EFFC.Frame.Net.Base.Data.DecimalStd,System.Double)">
            <summary>
            加運算
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_Increment(EFFC.Frame.Net.Base.Data.DecimalStd)">
            <summary>
            ++運算
            </summary>
            <param name="o1"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_UnaryNegation(EFFC.Frame.Net.Base.Data.DecimalStd)">
            <summary>
            负号運算
            </summary>
            <param name="o1"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_Subtraction(EFFC.Frame.Net.Base.Data.DecimalStd,EFFC.Frame.Net.Base.Data.DecimalStd)">
            <summary>
            减運算
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_Subtraction(EFFC.Frame.Net.Base.Data.DecimalStd,System.Decimal)">
            <summary>
            减運算
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_Subtraction(EFFC.Frame.Net.Base.Data.DecimalStd,System.Int32)">
            <summary>
            减運算
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_Subtraction(EFFC.Frame.Net.Base.Data.DecimalStd,System.Single)">
            <summary>
            减運算
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_Subtraction(EFFC.Frame.Net.Base.Data.DecimalStd,System.Double)">
            <summary>
            减運算
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_Decrement(EFFC.Frame.Net.Base.Data.DecimalStd)">
            <summary>
            --運算
            </summary>
            <param name="o1"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_Multiply(EFFC.Frame.Net.Base.Data.DecimalStd,EFFC.Frame.Net.Base.Data.DecimalStd)">
            <summary>
            乘法運算
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_Multiply(EFFC.Frame.Net.Base.Data.DecimalStd,System.Decimal)">
            <summary>
            乘法運算
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_Multiply(EFFC.Frame.Net.Base.Data.DecimalStd,System.Int32)">
            <summary>
            乘法運算
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_Multiply(EFFC.Frame.Net.Base.Data.DecimalStd,System.Single)">
            <summary>
            乘法運算
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_Multiply(EFFC.Frame.Net.Base.Data.DecimalStd,System.Double)">
            <summary>
            乘法運算
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_Division(EFFC.Frame.Net.Base.Data.DecimalStd,EFFC.Frame.Net.Base.Data.DecimalStd)">
            <summary>
            除法運算
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_Division(EFFC.Frame.Net.Base.Data.DecimalStd,System.Decimal)">
            <summary>
            除法運算
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_Division(EFFC.Frame.Net.Base.Data.DecimalStd,System.Int32)">
            <summary>
            除法運算
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_Division(EFFC.Frame.Net.Base.Data.DecimalStd,System.Single)">
            <summary>
            除法運算
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_Division(EFFC.Frame.Net.Base.Data.DecimalStd,System.Double)">
            <summary>
            除法運算
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_Modulus(EFFC.Frame.Net.Base.Data.DecimalStd,EFFC.Frame.Net.Base.Data.DecimalStd)">
            <summary>
            %運算
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_Modulus(EFFC.Frame.Net.Base.Data.DecimalStd,System.Decimal)">
            <summary>
            %運算
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_Modulus(EFFC.Frame.Net.Base.Data.DecimalStd,System.Int32)">
            <summary>
            %運算
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_Modulus(EFFC.Frame.Net.Base.Data.DecimalStd,System.Single)">
            <summary>
            %運算
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_Modulus(EFFC.Frame.Net.Base.Data.DecimalStd,System.Double)">
            <summary>
            %運算
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_Inequality(EFFC.Frame.Net.Base.Data.DecimalStd,EFFC.Frame.Net.Base.Data.DecimalStd)">
            <summary>
            !=判斷
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_Equality(EFFC.Frame.Net.Base.Data.DecimalStd,EFFC.Frame.Net.Base.Data.DecimalStd)">
            <summary>
            ==判斷
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_GreaterThanOrEqual(EFFC.Frame.Net.Base.Data.DecimalStd,EFFC.Frame.Net.Base.Data.DecimalStd)">
            <summary>
            >=判斷
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_LessThanOrEqual(EFFC.Frame.Net.Base.Data.DecimalStd,EFFC.Frame.Net.Base.Data.DecimalStd)">
            <summary>
            小於等於判斷
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_LessThan(EFFC.Frame.Net.Base.Data.DecimalStd,EFFC.Frame.Net.Base.Data.DecimalStd)">
            <summary>
            小于判斷
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.op_GreaterThan(EFFC.Frame.Net.Base.Data.DecimalStd,EFFC.Frame.Net.Base.Data.DecimalStd)">
            <summary>
            大于判斷
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.ParseStd(System.Object)">
            <summary>
            将Object转化成DecimalStd数据
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.IsDecimal(System.Object)">
            <summary>
            Decimal判斷
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.ToString(System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.Equals(System.Object)">
            <summary>
            equals
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DecimalStd.GetHashCode">
            <summary>
            Hash Code
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DoubleStd.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DoubleStd.#ctor(System.String)">
            <summary>
            default constructor with default value
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DoubleStd.#ctor(System.Double)">
            <summary>
            default constructor with default value
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DoubleStd.#ctor(System.Nullable{System.Double})">
            <summary>
            default constructor with default value
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DoubleStd.op_Implicit(System.Double)~EFFC.Frame.Net.Base.Data.DoubleStd">
            <summary>
            隐性转化
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DoubleStd.op_Implicit(System.Single)~EFFC.Frame.Net.Base.Data.DoubleStd">
            <summary>
            隐性转化
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DoubleStd.op_Implicit(System.Decimal)~EFFC.Frame.Net.Base.Data.DoubleStd">
            <summary>
            隐性转化
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DoubleStd.op_Implicit(System.Int32)~EFFC.Frame.Net.Base.Data.DoubleStd">
            <summary>
            隐性转化
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DoubleStd.op_Implicit(EFFC.Frame.Net.Base.Data.DoubleStd)~System.Double">
            <summary>
            隐性转化
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DoubleStd.op_Explicit(EFFC.Frame.Net.Base.Data.DoubleStd)~System.Single">
            <summary>
            隐性转化
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DoubleStd.op_Explicit(EFFC.Frame.Net.Base.Data.DoubleStd)~System.Int32">
            <summary>
            隐性转化
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DoubleStd.op_UnaryPlus(EFFC.Frame.Net.Base.Data.DoubleStd)">
            <summary>
            正号運算
            </summary>
            <param name="o1"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DoubleStd.op_Addition(EFFC.Frame.Net.Base.Data.DoubleStd,EFFC.Frame.Net.Base.Data.DoubleStd)">
            <summary>
            加運算
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DoubleStd.op_UnaryNegation(EFFC.Frame.Net.Base.Data.DoubleStd)">
            <summary>
            负号運算
            </summary>
            <param name="o1"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DoubleStd.op_Subtraction(EFFC.Frame.Net.Base.Data.DoubleStd,EFFC.Frame.Net.Base.Data.DoubleStd)">
            <summary>
            减運算
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DoubleStd.op_Multiply(EFFC.Frame.Net.Base.Data.DoubleStd,EFFC.Frame.Net.Base.Data.DoubleStd)">
            <summary>
            乘法運算
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DoubleStd.op_Division(EFFC.Frame.Net.Base.Data.DoubleStd,EFFC.Frame.Net.Base.Data.DoubleStd)">
            <summary>
            除法運算
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DoubleStd.op_Increment(EFFC.Frame.Net.Base.Data.DoubleStd)">
            <summary>
            ++運算
            </summary>
            <param name="o1"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DoubleStd.op_Decrement(EFFC.Frame.Net.Base.Data.DoubleStd)">
            <summary>
            --運算
            </summary>
            <param name="o1"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DoubleStd.op_Modulus(EFFC.Frame.Net.Base.Data.DoubleStd,EFFC.Frame.Net.Base.Data.DoubleStd)">
            <summary>
            %運算
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DoubleStd.op_Inequality(EFFC.Frame.Net.Base.Data.DoubleStd,EFFC.Frame.Net.Base.Data.DoubleStd)">
            <summary>
            !=判斷
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DoubleStd.op_Equality(EFFC.Frame.Net.Base.Data.DoubleStd,EFFC.Frame.Net.Base.Data.DoubleStd)">
            <summary>
            ==判斷
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DoubleStd.op_GreaterThanOrEqual(EFFC.Frame.Net.Base.Data.DoubleStd,EFFC.Frame.Net.Base.Data.DoubleStd)">
            <summary>
            >=判斷
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DoubleStd.op_LessThanOrEqual(EFFC.Frame.Net.Base.Data.DoubleStd,EFFC.Frame.Net.Base.Data.DoubleStd)">
            <summary>
            小於等於判斷
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DoubleStd.op_LessThan(EFFC.Frame.Net.Base.Data.DoubleStd,EFFC.Frame.Net.Base.Data.DoubleStd)">
            <summary>
            小於判斷
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DoubleStd.op_GreaterThan(EFFC.Frame.Net.Base.Data.DoubleStd,EFFC.Frame.Net.Base.Data.DoubleStd)">
            <summary>
            大於判斷
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DoubleStd.TryParse(System.String,EFFC.Frame.Net.Base.Data.DoubleStd@)">
            <summary>
            判斷字符串是否可以转换成doubleStd类型
            </summary>
            <param name="s"></param>
            <param name="o1"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DoubleStd.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,EFFC.Frame.Net.Base.Data.DoubleStd@)">
            <summary>
            判斷字符串是否可以转换成doubleStd类型
            </summary>
            <param name="s"></param>
            <param name="ns"></param>
            <param name="formatprovider"></param>
            <param name="o1"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DoubleStd.ParseStd(System.Object)">
            <summary>
            将Object转化成DoubleStd数据
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DoubleStd.IsDouble(System.Object)">
            <summary>
            double判斷
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.FloatStd.op_UnaryPlus(EFFC.Frame.Net.Base.Data.FloatStd)">
            <summary>
            正号運算
            </summary>
            <param name="o1"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.FloatStd.op_Addition(EFFC.Frame.Net.Base.Data.FloatStd,EFFC.Frame.Net.Base.Data.FloatStd)">
            <summary>
            加運算
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.FloatStd.op_UnaryNegation(EFFC.Frame.Net.Base.Data.FloatStd)">
            <summary>
            负号運算
            </summary>
            <param name="o1"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.FloatStd.op_Subtraction(EFFC.Frame.Net.Base.Data.FloatStd,EFFC.Frame.Net.Base.Data.FloatStd)">
            <summary>
            减運算
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.FloatStd.op_Multiply(EFFC.Frame.Net.Base.Data.FloatStd,EFFC.Frame.Net.Base.Data.FloatStd)">
            <summary>
            乘法運算
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.FloatStd.op_Division(EFFC.Frame.Net.Base.Data.FloatStd,EFFC.Frame.Net.Base.Data.FloatStd)">
            <summary>
            除法運算
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.FloatStd.op_Increment(EFFC.Frame.Net.Base.Data.FloatStd)">
            <summary>
            ++運算
            </summary>
            <param name="o1"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.FloatStd.op_Decrement(EFFC.Frame.Net.Base.Data.FloatStd)">
            <summary>
            --運算
            </summary>
            <param name="o1"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.FloatStd.op_Modulus(EFFC.Frame.Net.Base.Data.FloatStd,EFFC.Frame.Net.Base.Data.FloatStd)">
            <summary>
            %運算
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.FloatStd.op_Inequality(EFFC.Frame.Net.Base.Data.FloatStd,EFFC.Frame.Net.Base.Data.FloatStd)">
            <summary>
            !=判斷
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.FloatStd.op_Equality(EFFC.Frame.Net.Base.Data.FloatStd,EFFC.Frame.Net.Base.Data.FloatStd)">
            <summary>
            ==判斷
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.FloatStd.op_GreaterThanOrEqual(EFFC.Frame.Net.Base.Data.FloatStd,EFFC.Frame.Net.Base.Data.FloatStd)">
            <summary>
            >=判斷
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.FloatStd.op_LessThanOrEqual(EFFC.Frame.Net.Base.Data.FloatStd,EFFC.Frame.Net.Base.Data.FloatStd)">
            <summary>
            小於等於判斷
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.FloatStd.op_LessThan(EFFC.Frame.Net.Base.Data.FloatStd,EFFC.Frame.Net.Base.Data.FloatStd)">
            <summary>
            小於判斷
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.FloatStd.op_GreaterThan(EFFC.Frame.Net.Base.Data.FloatStd,EFFC.Frame.Net.Base.Data.FloatStd)">
            <summary>
            大於判斷
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.FloatStd.ParseStd(System.Object)">
            <summary>
            将Object转化成FloatStd数据
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.FloatStd.IsFloat(System.Object)">
            <summary>
            float判斷
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="T:EFFC.Frame.Net.Base.Data.Base.FrameDLRObject">
            <summary>
            动态数据对象，对象属性的为忽略大小的方式
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.FrameDLRObject.CreateInstance(System.Collections.Generic.Dictionary{System.String,System.Object},EFFC.Frame.Net.Base.Constants.FrameDLRFlags)">
            <summary>
            创建一个DLR的新实例对象
            </summary>
            <param name="d"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.FrameDLRObject.CreateInstance(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            创建一个DLR的新实例对象,默认忽略大小写
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.FrameDLRObject.CreateInstance(EFFC.Frame.Net.Base.Constants.FrameDLRFlags)">
            <summary>
            创建一个DLR的新实例对象
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.FrameDLRObject.CreateInstance">
            <summary>
            创建一个DLR的新实例对象,默认忽略大小写
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.FrameDLRObject.CreateInstance(System.String)">
            <summary>
            创建一个DLR的新实例对象,默认忽略大小写
            </summary>
            <param name="jsonstring"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.FrameDLRObject.CreateInstance(System.String,EFFC.Frame.Net.Base.Constants.FrameDLRFlags,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            根据json串创建动态对象
            </summary>
            <param name="jsonstring"></param>
            <param name="flags"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.FrameDLRObject.CreateInstance(System.String,System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            根据json串创建动态对象,默认忽略大小写
            </summary>
            <param name="jsonstring"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.FrameDLRObject.CreateInstance(System.Object)">
            <summary>
            创建动态对象，通过反射将model的property转成动态对象。对效能有影响，不建议使用
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.FrameDLRObject.BuildLoopDics(System.Collections.Generic.Dictionary{System.String,System.Object},EFFC.Frame.Net.Base.Constants.FrameDLRFlags)">
            <summary>
            递归建立动态json对象
            </summary>
            <param name="d"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.FrameDLRObject.SetValue(System.String,System.Object)">
            <summary>
            set value
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.FrameDLRObject.GetValue(System.String)">
            <summary>
            get value
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.FrameDLRObject.SetMetaValue(System.String,System.Object)">
            <summary>
            动态对象中的Setvalue
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.FrameDLRObject.GetMetaValue(System.String)">
            <summary>
            动态对象中的getvalue
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.FrameDLRObject.InvokeMe(System.String,System.Object[])">
            <summary>
            动态对象执行方法
            </summary>
            <param name="methodInfo"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.FrameDLRObject.IsJson(System.String)">
            <summary>
            判定是否为json对象
            </summary>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.FrameDLRObject.TryParse(System.String,EFFC.Frame.Net.Base.Constants.FrameDLRFlags,EFFC.Frame.Net.Base.Data.Base.FrameDLRObject@)">
            <summary>
            尝试将string转化成json对象
            </summary>
            <param name="json"></param>
            <param name="outobj"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.FrameDLRObject.TryParse(System.String,EFFC.Frame.Net.Base.Data.Base.FrameDLRObject@)">
            <summary>
            尝试将string转化成json对象
            </summary>
            <param name="json"></param>
            <param name="outobj"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.FrameDLRObject.ToJSONObject">
            <summary>
            转化成json对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.FrameDLRObject.ToJSONString">
            <summary>
            转成Json串
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.FrameDLRObject.ToDictionary">
            <summary>
            转化为dictionary
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.FrameDLRObject.Remove(System.String)">
            <summary>
            移除数据项
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.FrameDLRObject.Clear">
            <summary>
            清空数据
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.FrameDLRObject.ToModel``1">
            <summary>
            采用反射方式转化为强类型的对象,对效能有影响，不建议使用
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:EFFC.Frame.Net.Base.Data.Base.FrameDLRObject.IgnoreCase">
            <summary>
            设定或读取是否忽略大小写
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.Data.Base.FrameDLRObject.Keys">
            <summary>
            所有参数的key
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.IntStd.op_UnaryPlus(EFFC.Frame.Net.Base.Data.IntStd)">
            <summary>
            正号運算
            </summary>
            <param name="o1"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.IntStd.op_Addition(EFFC.Frame.Net.Base.Data.IntStd,EFFC.Frame.Net.Base.Data.IntStd)">
            <summary>
            加運算
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.IntStd.op_UnaryNegation(EFFC.Frame.Net.Base.Data.IntStd)">
            <summary>
            负号運算
            </summary>
            <param name="o1"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.IntStd.op_Subtraction(EFFC.Frame.Net.Base.Data.IntStd,EFFC.Frame.Net.Base.Data.IntStd)">
            <summary>
            减運算
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.IntStd.op_Multiply(EFFC.Frame.Net.Base.Data.IntStd,EFFC.Frame.Net.Base.Data.IntStd)">
            <summary>
            乘法運算
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.IntStd.op_Division(EFFC.Frame.Net.Base.Data.IntStd,EFFC.Frame.Net.Base.Data.IntStd)">
            <summary>
            除法運算
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.IntStd.op_Increment(EFFC.Frame.Net.Base.Data.IntStd)">
            <summary>
            ++運算
            </summary>
            <param name="o1"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.IntStd.op_Decrement(EFFC.Frame.Net.Base.Data.IntStd)">
            <summary>
            --運算
            </summary>
            <param name="o1"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.IntStd.op_Modulus(EFFC.Frame.Net.Base.Data.IntStd,EFFC.Frame.Net.Base.Data.IntStd)">
            <summary>
            %運算
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.IntStd.op_Inequality(EFFC.Frame.Net.Base.Data.IntStd,EFFC.Frame.Net.Base.Data.IntStd)">
            <summary>
            !=判斷
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.IntStd.op_Equality(EFFC.Frame.Net.Base.Data.IntStd,EFFC.Frame.Net.Base.Data.IntStd)">
            <summary>
            ==判斷
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.IntStd.op_GreaterThanOrEqual(EFFC.Frame.Net.Base.Data.IntStd,EFFC.Frame.Net.Base.Data.IntStd)">
            <summary>
            >=判斷
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.IntStd.op_LessThanOrEqual(EFFC.Frame.Net.Base.Data.IntStd,EFFC.Frame.Net.Base.Data.IntStd)">
            <summary>
            小於等於判斷
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.IntStd.op_LessThan(EFFC.Frame.Net.Base.Data.IntStd,EFFC.Frame.Net.Base.Data.IntStd)">
            <summary>
            小於判斷
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.IntStd.op_GreaterThan(EFFC.Frame.Net.Base.Data.IntStd,EFFC.Frame.Net.Base.Data.IntStd)">
            <summary>
            大於判斷
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.IntStd.ParseStd(System.Object)">
            <summary>
            将Object转化成IntStd数据
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.IntStd.IsInt(System.Object)">
            <summary>
            Int判斷
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="T:EFFC.Frame.Net.Base.Data.RegexStd">
            <summary>
            正則表達式標注化對象-利用線程防止匹配時間過長
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.RegexStd.Matches(System.String)">
            <summary>
            匹配出input中符合規則的字符串
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.RegexStd.IsMatch(System.String)">
            <summary>
            是否能匹配出input中符合規則的字符串
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="P:EFFC.Frame.Net.Base.Data.RegexStd.TimeOut">
            <summary>
            設定匹配超時，單位為毫秒
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.#ctor(System.String)">
            <summary>
            constructor
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.ParseStd(System.String)">
            <summary>
            转换成StringStd类型
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.ToStringArray(EFFC.Frame.Net.Base.Data.Base.StringStd[])">
            <summary>
            將StringStd[]转化成String[]
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.ToStringStdArray(System.String[])">
            <summary>
            將StringStd[]转化成String[]
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.op_Implicit(System.String)~EFFC.Frame.Net.Base.Data.Base.StringStd">
            <summary>
            隐含转换
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.op_Implicit(EFFC.Frame.Net.Base.Data.Base.StringStd)~System.String">
            <summary>
            隐含转换
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Equals(System.Object)">
            <summary>
            相等判定
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.op_Inequality(EFFC.Frame.Net.Base.Data.Base.StringStd,EFFC.Frame.Net.Base.Data.Base.StringStd)">
            <summary>
            判斷兩個指定的 System.StringStd 物件是否具有不同的值。
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.op_Equality(EFFC.Frame.Net.Base.Data.Base.StringStd,EFFC.Frame.Net.Base.Data.Base.StringStd)">
            <summary>
            判斷兩個指定的 System.StringStd 物件是否具有相同的值。
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Clone">
            <summary>
            傳回對 System.StringStd 這個執行個體的參考。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Compare(EFFC.Frame.Net.Base.Data.Base.StringStd,EFFC.Frame.Net.Base.Data.Base.StringStd)">
            <summary>
            比較兩個指定的 System.StringStd 物件。
            </summary>
            <param name="strA"></param>
            <param name="strB"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Compare(EFFC.Frame.Net.Base.Data.Base.StringStd,EFFC.Frame.Net.Base.Data.Base.StringStd,System.Boolean)">
            <summary>
            比較兩個指定的 System.StringStd 物件，忽略或承認它們的大小寫。
            </summary>
            <param name="strA"></param>
            <param name="strB"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Compare(EFFC.Frame.Net.Base.Data.Base.StringStd,EFFC.Frame.Net.Base.Data.Base.StringStd,System.StringComparison)">
            <summary>
            比較兩個指定的 System.StringStd 物件。參數可指定比較作業是否使用目前的文化特性或不因文化特性而異、接受或忽略大小寫，以及使用文字或序數的排序規則。
            </summary>
            <param name="strA"></param>
            <param name="strB"></param>
            <param name="comparisonType"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Compare(EFFC.Frame.Net.Base.Data.Base.StringStd,EFFC.Frame.Net.Base.Data.Base.StringStd,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            比較兩個指定的 System.StringStd 物件，忽略或承認它們的大小寫，並使用與文化特性相關的資訊影響比較。
            </summary>
            <param name="strA"></param>
            <param name="strB"></param>
            <param name="ignoreCase"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Compare(EFFC.Frame.Net.Base.Data.Base.StringStd,System.Int32,EFFC.Frame.Net.Base.Data.Base.StringStd,System.Int32,System.Int32)">
            <summary>
            比較兩個指定的 System.StringStd 物件的子字串。
            </summary>
            <param name="strA"></param>
            <param name="indexA"></param>
            <param name="strB"></param>
            <param name="indexB"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Compare(EFFC.Frame.Net.Base.Data.Base.StringStd,System.Int32,EFFC.Frame.Net.Base.Data.Base.StringStd,System.Int32,System.Int32,System.Boolean)">
            <summary>
            比較兩個指定的 System.StringStd 物件子字串，忽略或承認它們的大小寫。
            </summary>
            <param name="strA"></param>
            <param name="indexA"></param>
            <param name="strB"></param>
            <param name="indexB"></param>
            <param name="length"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Compare(EFFC.Frame.Net.Base.Data.Base.StringStd,System.Int32,EFFC.Frame.Net.Base.Data.Base.StringStd,System.Int32,System.Int32,System.StringComparison)">
            <summary>
            比較兩個指定的 System.StringStd 物件的子字串。
            </summary>
            <param name="strA"></param>
            <param name="indexA"></param>
            <param name="strB"></param>
            <param name="indexB"></param>
            <param name="length"></param>
            <param name="comparisonType"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Compare(EFFC.Frame.Net.Base.Data.Base.StringStd,System.Int32,EFFC.Frame.Net.Base.Data.Base.StringStd,System.Int32,System.Int32,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            比較兩個指定的 System.StringStd 物件的子字串，忽略或承認它們的大小寫，並使用與文化特性相關的資訊影響比較。
            </summary>
            <param name="strA"></param>
            <param name="indexA"></param>
            <param name="strB"></param>
            <param name="indexB"></param>
            <param name="length"></param>
            <param name="ignoreCase"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.CompareOrdinal(EFFC.Frame.Net.Base.Data.Base.StringStd,EFFC.Frame.Net.Base.Data.Base.StringStd)">
            <summary>
            藉由評估每個字串中對應的 System.Char 物件之數字值，比較兩個指定的 System.StringStd 物件。
            </summary>
            <param name="strA"></param>
            <param name="strB"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.CompareOrdinal(EFFC.Frame.Net.Base.Data.Base.StringStd,System.Int32,EFFC.Frame.Net.Base.Data.Base.StringStd,System.Int32,System.Int32)">
            <summary>
            藉由評估每個子字串中對應的 System.Char 物件之數字值，比較兩個指定的 System.StringStd 物件之子字串。
            </summary>
            <param name="strA"></param>
            <param name="indexA"></param>
            <param name="strB"></param>
            <param name="indexB"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.CompareTo(System.Object)">
            <summary>
            比較這個執行個體與指定的 System.Object。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.CompareTo(EFFC.Frame.Net.Base.Data.Base.StringStd)">
            <summary>
            比較這個執行個體與指定的 System.StringStd 物件。
            </summary>
            <param name="strB"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Concat(System.Object)">
            <summary>
            建立指定物件的 System.StringStd 表示。
            </summary>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Concat(System.Object[])">
            <summary>
            串連指定 System.Object 陣列中元素的 System.StringStd 表示。
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Concat(EFFC.Frame.Net.Base.Data.Base.StringStd[])">
            <summary>
            串連指定 System.StringStd 陣列中的元素。
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Concat(System.Object,System.Object)">
            <summary>
            串連兩個指定物件的 System.StringStd 表示。
            </summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Concat(EFFC.Frame.Net.Base.Data.Base.StringStd,EFFC.Frame.Net.Base.Data.Base.StringStd)">
            <summary>
            串連 System.StringStd 的兩個指定執行個體。
            </summary>
            <param name="str0"></param>
            <param name="str1"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Concat(System.Object,System.Object,System.Object)">
            <summary>
            串連三個指定物件的 System.StringStd 表示。
            </summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Concat(EFFC.Frame.Net.Base.Data.Base.StringStd,EFFC.Frame.Net.Base.Data.Base.StringStd,EFFC.Frame.Net.Base.Data.Base.StringStd)">
            <summary>
            串連 System.StringStd 的三個指定執行個體。
            </summary>
            <param name="str0"></param>
            <param name="str1"></param>
            <param name="str2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Concat(System.Object,System.Object,System.Object,System.Object)">
            <summary>
            串連四個指定的物件之 System.StringStd 表示和選擇性變數長度參數清單中所指定的任何物件。
            </summary>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <param name="arg3"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Concat(EFFC.Frame.Net.Base.Data.Base.StringStd,EFFC.Frame.Net.Base.Data.Base.StringStd,EFFC.Frame.Net.Base.Data.Base.StringStd,EFFC.Frame.Net.Base.Data.Base.StringStd)">
            <summary>
            串連 System.StringStd 的四個指定執行個體。
            </summary>
            <param name="str0"></param>
            <param name="str1"></param>
            <param name="str2"></param>
            <param name="str3"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Contains(EFFC.Frame.Net.Base.Data.Base.StringStd)">
            <summary>
            傳回值，指出指定的 System.StringStd 物件是否會出現在這個字串內。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Copy(EFFC.Frame.Net.Base.Data.Base.StringStd)">
            <summary>
            使用與指定的 System.StringStd 相同的值，建立 System.StringStd 的新執行個體。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary>
            將字元的指定數目從這個執行個體的指定位置，複製到 Unicode 字元陣列的指定位置。
            </summary>
            <param name="sourceIndex"></param>
            <param name="destination"></param>
            <param name="destinationIndex"></param>
            <param name="count"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.EndsWith(EFFC.Frame.Net.Base.Data.Base.StringStd)">
            <summary>
            判斷這個執行個體的結尾是否符合指定的字串。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.EndsWith(EFFC.Frame.Net.Base.Data.Base.StringStd,System.StringComparison)">
            <summary>
            判斷當使用指定之比較選項進行比較時，此字串的結尾是否符合指定之字串。
            </summary>
            <param name="value"></param>
            <param name="comparisonType"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.EndsWith(EFFC.Frame.Net.Base.Data.Base.StringStd,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            判斷當使用指定之文化特性進行比較時，此字串的結尾是否符合指定之字串。
            </summary>
            <param name="value"></param>
            <param name="ignoreCase"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Equals(EFFC.Frame.Net.Base.Data.Base.StringStd)">
            <summary>
            判斷這個執行個體和另一個指定的 System.StringStd 物件是否具有相同的值。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Equals(EFFC.Frame.Net.Base.Data.Base.StringStd,EFFC.Frame.Net.Base.Data.Base.StringStd)">
            <summary>
            判斷兩個指定的 System.StringStd 物件是否具有相同的值。
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Equals(EFFC.Frame.Net.Base.Data.Base.StringStd,System.StringComparison)">
            <summary>
             判斷這個字串和指定的 System.StringStd 物件是否具有相同的值。參數可指定用於比較的文化特性、大小寫及排序規則。
            </summary>
            <param name="value"></param>
            <param name="comparisonType"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Equals(EFFC.Frame.Net.Base.Data.Base.StringStd,EFFC.Frame.Net.Base.Data.Base.StringStd,System.StringComparison)">
            <summary>
            判斷兩個指定的 System.StringStd 物件是否具有相同的值。參數可指定用於比較的文化特性、大小寫及排序規則。
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="comparisonType"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Format(EFFC.Frame.Net.Base.Data.Base.StringStd,System.Object)">
            <summary>
            以與指定的 System.Object 執行個體值相等的文字，取代指定的 System.StringStd 中的格式項目。
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Format(EFFC.Frame.Net.Base.Data.Base.StringStd,System.Object[])">
            <summary>
            以與指定陣列中對應的 System.Object 執行個體值相等的文字，取代指定的 System.StringStd 中的格式項目。
            </summary>
            <param name="format"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Format(System.IFormatProvider,EFFC.Frame.Net.Base.Data.Base.StringStd,System.Object[])">
            <summary>
            以與指定陣列中對應的 System.Object 執行個體值相等的文字，取代指定的 System.StringStd 中的格式項目。指定的參數提供特定文化特性的格式資訊。
            </summary>
            <param name="provider"></param>
            <param name="format"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Format(EFFC.Frame.Net.Base.Data.Base.StringStd,System.Object,System.Object)">
            <summary>
            以與兩個指定的 System.Object 執行個體值相等的文字，取代指定的 System.StringStd 中的格式項目。
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Format(EFFC.Frame.Net.Base.Data.Base.StringStd,System.Object,System.Object,System.Object)">
            <summary>
            以與三個指定的 System.Object 執行個體值相等的文字，取代指定的 System.StringStd 中的格式項目。
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.GetEnumerator">
            <summary>
            擷取可以逐一查看這個字串中個別字元的物件。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.GetHashCode">
            <summary>
            傳回這個字串的雜湊程式碼。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.GetTypeCode">
            <summary>
            傳回類別 System.StringStd 的 System.TypeCode。
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.IndexOf(System.Char)">
            <summary>
            報告這個字串中指定之 Unicode 字元的第一個符合項目的索引。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.IndexOf(EFFC.Frame.Net.Base.Data.Base.StringStd)">
            <summary>
            報告這個執行個體中指定 System.StringStd 第一個符合項目的索引。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.IndexOf(System.Char,System.Int32)">
            <summary>
            報告這個字串中指定之 Unicode 字元的第一個符合項目的索引。搜尋從指定的字元位置開始。
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.IndexOf(EFFC.Frame.Net.Base.Data.Base.StringStd,System.Int32)">
            <summary>
            報告這個執行個體中指定 System.StringStd 第一個符合項目的索引。搜尋從指定的字元位置開始。
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.IndexOf(EFFC.Frame.Net.Base.Data.Base.StringStd,System.StringComparison)">
            <summary>
            報告目前 System.StringStd 物件中所指定字串之第一個出現的索引。參數會指定要用於指定字串的搜尋類型。
            </summary>
            <param name="value"></param>
            <param name="comparisonType"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.IndexOf(System.Char,System.Int32,System.Int32)">
            <summary>
            報告這個執行個體中指定字元第一個符合項目的索引。搜尋從指定的字元位置開始，並檢視指定數目的字元位置。
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.IndexOf(EFFC.Frame.Net.Base.Data.Base.StringStd,System.Int32,System.Int32)">
            <summary>
            報告這個執行個體中指定 System.StringStd 第一個符合項目的索引。搜尋從指定的字元位置開始，並檢視指定數目的字元位置。
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.IndexOf(EFFC.Frame.Net.Base.Data.Base.StringStd,System.Int32,System.StringComparison)">
            <summary>
            報告目前 System.StringStd 物件中所指定字串之第一個出現的索引。參數會指定目前字串中的開始搜尋位置和要用於指定字串的搜尋類型。
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <param name="comparisonType"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.IndexOf(EFFC.Frame.Net.Base.Data.Base.StringStd,System.Int32,System.Int32,System.StringComparison)">
            <summary>
            報告目前 System.StringStd 物件中所指定字串之第一個出現的索引。參數會指定目前字串中的開始搜尋位置、目前字串中要搜尋的字元數目，以及要用於指定字串的搜尋類型。
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <param name="comparisonType"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.IndexOfAny(System.Char[])">
            <summary>
            報告指定 Unicode 字元陣列中的任何字元於這個執行個體中第一個符合項目的索引。
            </summary>
            <param name="anyOf"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.IndexOfAny(System.Char[],System.Int32)">
            <summary>
            報告指定 Unicode 字元陣列中的任何字元於這個執行個體中第一個符合項目的索引。搜尋從指定的字元位置開始。
            </summary>
            <param name="anyOf"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.IndexOfAny(System.Char[],System.Int32,System.Int32)">
            <summary>
            報告指定 Unicode 字元陣列中的任何字元於這個執行個體中第一個符合項目的索引。搜尋從指定的字元位置開始，並檢視指定數目的字元位置。
            </summary>
            <param name="anyOf"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Insert(System.Int32,EFFC.Frame.Net.Base.Data.Base.StringStd)">
            <summary>
            在這個執行個體的指定索引位置，插入 System.StringStd 的指定執行個體。
            </summary>
            <param name="startIndex"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.IsNullOrEmpty(EFFC.Frame.Net.Base.Data.Base.StringStd)">
            <summary>
            指出指定的 System.StringStd 物件是否為 null 或 System.StringStd.Empty 字串。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Join(EFFC.Frame.Net.Base.Data.Base.StringStd,EFFC.Frame.Net.Base.Data.Base.StringStd[])">
            <summary>
            將指定 System.StringStd 陣列每個元素之間的指定分隔符號 System.StringStd 串連，產生單一的串連字串。
            </summary>
            <param name="separator"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Join(EFFC.Frame.Net.Base.Data.Base.StringStd,EFFC.Frame.Net.Base.Data.Base.StringStd[],System.Int32,System.Int32)">
            <summary>
            將指定 System.StringStd 陣列每個元素之間的指定分隔符號 System.StringStd 串連，產生單一的串連字串。參數指定要使用的第一個陣列元素和元素數目。
            </summary>
            <param name="separator"></param>
            <param name="value"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.LastIndexOf(System.Char)">
            <summary>
            報告這個執行個體中指定 Unicode 字元最後項目的索引位置。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.LastIndexOf(EFFC.Frame.Net.Base.Data.Base.StringStd)">
            <summary>
            報告這個執行個體中指定 System.StringStd 最後項目的索引位置。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.LastIndexOf(System.Char,System.Int32)">
            <summary>
            報告這個執行個體中指定 Unicode 字元最後項目的索引位置。搜尋從指定的字元位置開始。
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.LastIndexOf(EFFC.Frame.Net.Base.Data.Base.StringStd,System.Int32)">
            <summary>
            報告這個執行個體中指定 System.StringStd 最後項目的索引位置。搜尋從指定的字元位置開始。
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.LastIndexOf(EFFC.Frame.Net.Base.Data.Base.StringStd,System.StringComparison)">
            <summary>
            報告目前 System.StringStd 物件中所指定字串之最後一個項目的索引。參數會指定要用於指定字串的搜尋類型。
            </summary>
            <param name="value"></param>
            <param name="comparisonType"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.LastIndexOf(System.Char,System.Int32,System.Int32)">
            <summary>
            報告這個執行個體中子字串的指定 Unicode 字元最後項目的索引位置。搜尋從指定的字元位置開始，並檢視指定數目的字元位置。
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.LastIndexOf(EFFC.Frame.Net.Base.Data.Base.StringStd,System.Int32,System.Int32)">
            <summary>
            報告這個執行個體中指定 System.StringStd 最後項目的索引位置。搜尋從指定的字元位置開始，並檢視指定數目的字元位置。
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.LastIndexOf(EFFC.Frame.Net.Base.Data.Base.StringStd,System.Int32,System.StringComparison)">
            <summary>
            報告目前 System.StringStd 物件中所指定字串之最後一個項目的索引。參數會指定目前字串中的開始搜尋位置和要用於指定字串的搜尋類型。
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <param name="comparisonType"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.LastIndexOf(EFFC.Frame.Net.Base.Data.Base.StringStd,System.Int32,System.Int32,System.StringComparison)">
            <summary>
            報告這個執行個體中指定 System.StringStd 物件的最後一個項目的索引位置。參數會指定目前字串中的開始搜尋位置、目前字串中要搜尋的字元數目，以及要用於指定字串的搜尋類型。
            </summary>
            <param name="value"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <param name="comparisonType"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.LastIndexOfAny(System.Char[])">
            <summary>
            報告 Unicode 陣列中的一個或多個指定字元在這個執行個體中最後項目的索引位置。
            </summary>
            <param name="anyOf"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.LastIndexOfAny(System.Char[],System.Int32)">
            <summary>
            報告 Unicode 陣列中的一個或多個指定字元在這個執行個體中最後項目的索引位置。搜尋從指定的字元位置開始。
            </summary>
            <param name="anyOf"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.LastIndexOfAny(System.Char[],System.Int32,System.Int32)">
            <summary>
            報告 Unicode 陣列中的一個或多個指定字元在這個執行個體中最後項目的索引位置。搜尋從指定的字元位置開始，並檢視指定數目的字元位置。
            </summary>
            <param name="anyOf"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.PadLeft(System.Int32)">
            <summary>
            將這個執行個體中的字元靠右對齊，以空格在左側填補至指定的總長度。
            </summary>
            <param name="totalWidth"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.PadLeft(System.Int32,System.Char)">
            <summary>
            將這個執行個體中的字元靠右對齊，以指定的 Unicode 字元在左側填補至指定的總長度。
            </summary>
            <param name="totalWidth"></param>
            <param name="paddingChar"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.PadRight(System.Int32)">
            <summary>
            將這個字串中的字元靠左對齊，以空格在右側填補至指定的總長度。
            </summary>
            <param name="totalWidth"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.PadRight(System.Int32,System.Char)">
            <summary>
            將這個字串中的字元靠左對齊，以指定的 Unicode 字元在右側填補至指定的總長度。
            </summary>
            <param name="totalWidth"></param>
            <param name="paddingChar"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Remove(System.Int32)">
            <summary>
            從這個字串中的指定之位置開始刪除所有字元，一直到最後一個位置為止。
            </summary>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Remove(System.Int32,System.Int32)">
            <summary>
            將指定字元數從起始於指定位置的這個執行個體中刪除。
            </summary>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Replace(System.Char,System.Char)">
            <summary>
            以另一個指定的 Unicode 字元，取代這個執行個體中指定的 Unicode 字元的所有項目。
            </summary>
            <param name="oldChar"></param>
            <param name="newChar"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Replace(EFFC.Frame.Net.Base.Data.Base.StringStd,EFFC.Frame.Net.Base.Data.Base.StringStd)">
            <summary>
            以另一個指定的 System.StringStd，取代這個執行個體中指定的 System.StringStd 的所有項目。
            </summary>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Split(System.Char[])">
            <summary>
            傳回 System.StringStd 在這個執行個體中包含子字串的陣列，它是由指定的 System.Char 陣列項目分隔的。
            </summary>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Split(System.Char[],System.Int32)">
            <summary>
            傳回 System.StringStd 在這個執行個體中包含子字串的陣列，它是由指定的 System.Char 陣列項目分隔的。參數可指定要傳回的子字串數目的最大值。
            </summary>
            <param name="separator">Unicode 字元陣列，分隔這個執行個體中的子字串；空陣列，不包含分隔符號；或 null。</param>
            <param name="count">要傳回的子字串之最大數目。</param>
            <returns>陣列，其元素包含了這個執行個體中由 separator 內的一或多個字元所分隔的子字串。如需詳細資訊，請參閱＜備註＞一節。</returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Split(System.Char[],System.StringSplitOptions)">
            <summary>
            傳回 System.StringStd 陣列，其中包含這個字串中的子字串，都由指定的 System.Char 陣列元素所分隔。參數指定是否傳回空白的陣列元素。
            </summary>
            <param name="separator">Unicode 字元陣列 (可分隔這個字串中的子字串)、不含任何分隔符號的空白陣列，或 null。</param>
            <param name="options"> 指定 System.StringSplitOptions.RemoveEmptyEntries，省略傳回陣列的空白陣列元素；或 System.StringSplitOptions.None，在傳回陣列中包含空白陣列元素。</param>
            <returns>陣列，其元素包含了這個字串中由 separator 內的一或多個字元所分隔的子字串。如需詳細資訊，請參閱＜備註＞一節。</returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Split(System.String[],System.StringSplitOptions)">
            <summary>
            傳回 System.StringStd 陣列，其中包含這個字串中的子字串，都由指定的 System.StringStd 陣列元素所分隔。參數指定是否傳回空白的陣列元素。
            </summary>
            <param name="separator">字串陣列 (可分隔這個字串中的子字串)、不含任何分隔符號的空白陣列，或 null。</param>
            <param name="options">指定 System.StringSplitOptions.RemoveEmptyEntries，省略傳回陣列的空白陣列元素；或 System.StringSplitOptions.None，在傳回陣列中包含空白陣列元素。</param>
            <returns>陣列，其元素包含了這個字串中由 separator 內的一或多個字串所分隔的子字串。如需詳細資訊，請參閱＜備註＞一節。</returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Split(EFFC.Frame.Net.Base.Data.Base.StringStd[],System.StringSplitOptions)">
            <summary>
            傳回 System.StringStd 陣列，其中包含這個字串中的子字串，都由指定的 System.StringStd 陣列元素所分隔。參數指定是否傳回空白的陣列元素。
            </summary>
            <param name="separator"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Split(System.String)">
            <summary>
            傳回 System.StringStd 陣列，其中包含這個字串中的子字串，都由指定的 System.StringStd 陣列元素所分隔。傳回空白的陣列元素。
            </summary>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Split(EFFC.Frame.Net.Base.Data.Base.StringStd)">
            <summary>
            傳回 System.StringStd 陣列，其中包含這個字串中的子字串，都由指定的 System.StringStd 陣列元素所分隔。傳回空白的陣列元素。
            </summary>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Split(System.Char[],System.Int32,System.StringSplitOptions)">
            <summary>
            傳回 System.StringStd 陣列，其中包含這個字串中的子字串，都由指定的 System.Char 陣列元素所分隔。參數指定傳回的子字串最大數目，以及是否傳回空的陣列元素。
            </summary>
            <param name="separator">Unicode 字元陣列 (可分隔這個字串中的子字串)、不含任何分隔符號的空白陣列，或 null。</param>
            <param name="count">要傳回的子字串之最大數目。</param>
            <param name="options">指定 System.StringSplitOptions.RemoveEmptyEntries，省略傳回陣列的空白陣列元素；或 System.StringSplitOptions.None，在傳回陣列中包含空白陣列元素。</param>
            <returns> 陣列，其元素包含了這個字串中由 separator 內的一或多個字元所分隔的子字串。如需詳細資訊，請參閱＜備註＞一節。</returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Split(EFFC.Frame.Net.Base.Data.Base.StringStd[],System.Int32,System.StringSplitOptions)">
            <summary>
            傳回 System.StringStd 陣列，其中包含這個字串中的子字串，都由指定的 System.StringStd 陣列元素所分隔。參數指定傳回的子字串最大數目，以及是否傳回空的陣列元素。
            </summary>
            <param name="separator">字串陣列 (可分隔這個字串中的子字串)、不含任何分隔符號的空白陣列，或 null。</param>
            <param name="count">要傳回的子字串之最大數目。</param>
            <param name="options">指定 System.StringSplitOptions.RemoveEmptyEntries，省略傳回陣列的空白陣列元素；或 System.StringSplitOptions.None，在傳回陣列中包含空白陣列元素。</param>
            <returns>陣列，其元素包含了這個字串中由 separator 內的一或多個字串所分隔的子字串。如需詳細資訊，請參閱＜備註＞一節。</returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.StartsWith(EFFC.Frame.Net.Base.Data.Base.StringStd)">
            <summary>
            判斷這個執行個體的開頭是否符合指定的字串。
            </summary>
            <param name="value">要比較的 System.StringStd。</param>
            <returns>如果 value 符合這個字串的開頭，則為 true，否則為 false。</returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.StartsWith(EFFC.Frame.Net.Base.Data.Base.StringStd,System.StringComparison)">
            <summary>
            判斷當使用指定之比較選項進行比較時，此字串的開頭是否符合指定之字串。
            </summary>
            <param name="value">要比較的 System.StringStd 物件。</param>
            <param name="comparisonType">其中一個 System.StringComparison 值，可決定要如何比較這個字串和 value。</param>
            <returns> 如果 value 參數符合這個字串的開頭，則為 true，否則為 false。</returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.StartsWith(EFFC.Frame.Net.Base.Data.Base.StringStd,System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            判斷當使用指定之文化特性進行比較時，此字串的開頭是否符合指定之字串。
            </summary>
            <param name="value">要比較的 System.StringStd 物件。</param>
            <param name="ignoreCase">true 表示在比較這個字串與 value 時要忽略大小寫，否則為 false。</param>
            <param name="culture">判斷此字串和 value 如何進行比較的文化特性資訊。如果 culture 是 null，則會使用目前的文化特性。</param>
            <returns>如果 value 參數符合這個字串的開頭，則為 true，否則為 false。</returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Substring(System.Int32)">
            <summary>
            從這個執行個體擷取子字串。子字串從指定的字元位置開始。
            </summary>
            <param name="startIndex">這個執行個體中的子字串起始字元位置。</param>
            <returns>System.StringStd 物件，其相當於此執行個體中開始於 startIndex 的子字串；如果 startIndex 等於此執行個體的長度，則為
                System.StringStd.Empty。</returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Substring(System.Int32,System.Int32)">
            <summary>
            從這個執行個體擷取子字串。子字串起始於指定的字元位置，並且具有指定的長度。
            </summary>
            <param name="startIndex">子字串的起始索引。</param>
            <param name="length">子字串中的字元數。</param>
            <returns>System.StringStd，其相當於此執行個體中開始於 startIndex 且長度為 length 的子字串；如果 startIndex 等於此執行個體的長度，且
                length 為零，則為 System.StringStd.Empty。</returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.ToCharArray">
            <summary>
            將這個執行個體中的字元複製到 Unicode 字元陣列中。
            </summary>
            <returns>Unicode 字元陣列，其元素是這個執行個體的個別字元。如果這個執行個體是空字串，則傳回的陣列會是空的且長度為零。</returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.ToCharArray(System.Int32,System.Int32)">
            <summary>
            將這個執行個體的指定子字串字元複製到 Unicode 字元陣列。
            </summary>
            <param name="startIndex">這個執行個體中的子字串起始位置。</param>
            <param name="length">這個執行個體中的子字串長度。</param>
            <returns>Unicode 字元陣列，其元素是從 startIndex 字元位置起始的這個執行個體中的 length 字元數。</returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.ToLower">
            <summary>
            傳回轉換成小寫的這個 System.StringStd 複本，透過的方式是使用目前文化特性的大小寫規則。
            </summary>
            <returns>小寫的 System.StringStd。</returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.ToLower(System.Globalization.CultureInfo)">
            <summary>
            傳回轉換成小寫的這個 System.StringStd 複本，透過的方式是使用指定之文化特性的大小寫規則。
            </summary>
            <param name="culture">System.Globalization.CultureInfo 物件，提供文化特性的特定大小寫規則。</param>
            <returns>小寫的 System.StringStd。</returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.ToLowerInvariant">
            <summary>
            傳回轉換成小寫的這個 System.StringStd 物件之複本，透過的方式是使用不因文化特性而異的大小寫規則。
            </summary>
            <returns>小寫的 System.StringStd 物件。</returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.ToUpper">
            <summary>
            傳回轉換成大寫的這個 System.StringStd 複本，透過的方式是使用目前文化特性的大小寫規則。
            </summary>
            <returns>大寫的 System.StringStd。</returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.ToUpper(System.Globalization.CultureInfo)">
            <summary>
            傳回轉換成大寫的這個 System.StringStd 複本，透過的方式是使用指定之文化特性的大小寫規則。
            </summary>
            <param name="culture">System.Globalization.CultureInfo 物件，提供文化特性的特定大小寫規則。</param>
            <returns>大寫的 System.StringStd。</returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.ToUpperInvariant">
            <summary>
            傳回轉換成大寫的這個 System.StringStd 物件之複本，透過的方式是使用不因文化特性而異的大小寫規則。
            </summary>
            <returns>大寫的 System.StringStd 物件。</returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Trim">
            <summary>
            將所有泛空白字元的項目從這個執行個體的開頭和結尾移除。
            </summary>
            <returns>新的 System.StringStd，等於從開頭和結尾移除泛空白字元後的這個執行個體。</returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.Trim(System.Char[])">
            <summary>
            將陣列中指定的字元集之所有項目從這個執行個體的開頭和結尾移除。
            </summary>
            <param name="trimChars">要移除的 Unicode 字元陣列或 null。</param>
            <returns>剩餘的 System.StringStd，從這個執行個體的開頭和結尾移除 trimChars 中字元的所有項目之後。如果 trimChars 為 null，則反而會移除泛空白字元。</returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.TrimEnd(System.Char[])">
            <summary>
            將陣列中指定的字元集之所有項目從這個執行個體的結尾移除。
            </summary>
            <param name="trimChars">要移除的 Unicode 字元陣列或 null。</param>
            <returns>剩餘的 System.StringStd，從 trimChars 中移除字元的所有項目之後。如果 trimChars 為 null，則反而會移除泛空白字元。</returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.Base.StringStd.TrimStart(System.Char[])">
            <summary>
            將陣列中指定的字元集之所有項目從這個執行個體的開頭移除。
            </summary>
            <param name="trimChars"></param>
            <returns>在 trimChars 中之字元的所有項目移除之後，剩餘的 System.StringStd。如果 trimChars 為 null，則反而會移除泛空白字元。</returns>
        </member>
        <member name="P:EFFC.Frame.Net.Base.Data.Base.StringStd.Length">
            <summary>
            取得這個執行個體中的字元數。
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.Data.Base.StringStd.Item(System.Int32)">
            <summary>
            取得這個執行個體中指定字元位置的字元。
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:EFFC.Frame.Net.Base.Data.DataCollection">
            <summary>
            数据集合用于架构中各个层次间的数据交换-提供线程安全处理
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataCollection.TryGetValue(System.String,System.Object@)">
            <summary>
            在并发情况下尝试获取数据
            </summary>
            <param name="key"></param>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataCollection.TrySetValue(System.String,System.Object)">
            <summary>
            在并发情况下尝试写入数据，如果数据存在则尝试新增数据，否则尝试更新数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataCollection.TryRemove(System.String,System.Object@)">
            <summary>
            在并发情况下尝试移除数据
            </summary>
            <param name="key"></param>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataCollection.GetValue_Inner(System.String)">
            <summary>
            获取数据，如果在并发情况下获取数据失败则返回null
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataCollection.SetValue_Inner(System.String,System.Object)">
            <summary>
            写入数据，如果在并发情况下写入失败而抛出异常SyncException
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataCollection.Remove_Inner(System.String)">
            <summary>
            移除数据，如果在并发情况下失败而抛出异常SyncException
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Data.DataCollection.Clear_Inner">
            <summary>
            清空数据，为非线程安全处理
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Interfaces.Core.IDistributeTransaction.BeginTransaction(EFFC.Frame.Net.Base.Token.TransactionToken)">
            <summary>
            开启事务处理
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Interfaces.Core.IDistributeTransaction.CommitTransaction(EFFC.Frame.Net.Base.Token.TransactionToken)">
            <summary>
            提交事务处理
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Interfaces.Core.IDistributeTransaction.RollbackTransaction(EFFC.Frame.Net.Base.Token.TransactionToken)">
            <summary>
            回滚事务处理
            </summary>
        </member>
        <member name="T:EFFC.Frame.Net.Base.Interfaces.Core.IModular">
            <summary>
            可模块化
            </summary>
        </member>
        <member name="T:EFFC.Frame.Net.Base.Interfaces.Core.IModularProxy">
            <summary>
            模块呼叫接口
            </summary>
        </member>
        <member name="T:EFFC.Frame.Net.Base.Interfaces.Core.IModularProxy`2">
            <summary>
            模块呼叫接口
            </summary>
            <typeparam name="P"></typeparam>
            <typeparam name="D"></typeparam>
        </member>
        <member name="T:EFFC.Frame.Net.Base.Interfaces.Core.IUnit">
            <summary>
            模块的最小单位-Unit，只可本地调用
            </summary>
        </member>
        <member name="T:EFFC.Frame.Net.Base.Interfaces.Core.IUnit`1">
            <summary>
            模块的最小单位-Unit，只可本地调用
            </summary>
            <typeparam name="P"></typeparam>
        </member>
        <member name="T:EFFC.Frame.Net.Base.Module.AssemblyModuleProxy">
            <summary>
            通过动态方式加载module
            CalledModuleName：待呼叫的module的name
            CalledModuleVersion：待呼叫的module的version
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.Module.AssemblyModuleProxy.AssemblyPath">
            <summary>
            Assembly的路径描述
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.Module.AssemblyModuleProxy.CalledModuleName">
            <summary>
            待呼叫的module的name
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.Module.AssemblyModuleProxy.CalledModuleVersion">
            <summary>
            待呼叫的module的version
            </summary>
        </member>
        <member name="T:EFFC.Frame.Net.Base.Module.AssemblyModuleProxy`2">
            <summary>
            通过动态方式加载module
            CalledModuleName：待呼叫的module的name
            CalledModuleVersion：待呼叫的module的version
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.Module.AssemblyModuleProxy`2.AssemblyPath">
            <summary>
            Assembly的路径描述
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.Module.AssemblyModuleProxy`2.CalledModuleName">
            <summary>
            待呼叫的module的name
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.Module.AssemblyModuleProxy`2.CalledModuleVersion">
            <summary>
            待呼叫的module的version
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Module.HttpRemoteProxy`2.SetEncoding(System.Text.Encoding)">
            <summary>
            设置请求的Encode,默认为utf8
            </summary>
            <param name="encode"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Module.HttpRemoteProxy`2.SetRequestMethod(System.String)">
            <summary>
            设置请求的Method,默认为post
            </summary>
            <param name="request_method">post,get</param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Module.HttpRemoteProxy`2.SetContentType(System.String)">
            <summary>
            设置请求的Content type,默认为application/x-www-form-urlencoded
            </summary>
            <param name="content_type"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Module.HttpRemoteProxy`2.SetRequestURL(System.String)">
            <summary>
            设置请求的URL
            </summary>
            <param name="url"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Module.HttpRemoteProxy`2.AddPostData(System.String,System.Object)">
            <summary>
            添加post数据
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Module.HttpRemoteProxy`2.GetRequestInstance">
            <summary>
            獲得一個webrequest的實例
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Module.HttpRemoteProxy`2.GetPostDataData">
            <summary>
            獲得postdata的串
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Module.LocalModuleProxy.BeginCallModule(EFFC.Frame.Net.Base.Parameter.ParameterStd,EFFC.Frame.Net.Base.Data.DataCollection,System.Action{EFFC.Frame.Net.Base.Parameter.ParameterStd,EFFC.Frame.Net.Base.Data.DataCollection})">
            <summary>
            执行异步操作，在该模式下，参数集会复制使其线程独占，数据集则采用线程共享模式
            异步操作处理时，不提供中断操作
            </summary>
            <param name="p"></param>
            <param name="data"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Module.LocalModuleProxy.EndCallModule(EFFC.Frame.Net.Base.Parameter.ParameterStd,EFFC.Frame.Net.Base.Data.DataCollection)">
            <summary>
            执行异步操作结束操作
            等待作业处理完成，如果执行的过程中有异常，则会抛出异常
            </summary>
            <param name="p"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Module.LocalModuleProxy.WaitMe(EFFC.Frame.Net.Base.Parameter.ParameterStd,EFFC.Frame.Net.Base.Data.DataCollection)">
            <summary>
            等待异步操作完成，执行过程中有异常则会引发异常的抛出
            </summary>
            <param name="p"></param>
            <param name="data"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Module.LocalModuleProxy`2.BeginCallModule(`0,`1,System.Action{`0,`1})">
            <summary>
            执行异步操作，在该模式下，参数集会复制使其线程独占，数据集则采用线程共享模式
            异步操作处理时，不提供中断操作
            </summary>
            <param name="p"></param>
            <param name="data"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Module.LocalModuleProxy`2.EndCallModule(`0,`1)">
            <summary>
            执行异步操作结束操作
            等待作业处理完成，如果执行的过程中有异常，则会抛出异常
            </summary>
            <param name="p"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Module.LocalModuleProxy`2.WaitMe(`0,`1)">
            <summary>
            等待异步操作完成，执行过程中有异常则会引发异常的抛出
            </summary>
            <param name="p"></param>
            <param name="data"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Module.ModuleProxyManager.Call``1(EFFC.Frame.Net.Base.Parameter.ParameterStd,EFFC.Frame.Net.Base.Data.DataCollection)">
            <summary>
            同步调用一个模块
            </summary>
            <typeparam name="T"></typeparam>
            <param name="p"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Module.ModuleProxyManager.Call``3(``1,``2)">
            <summary>
            同步调用一个模块
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="P"></typeparam>
            <typeparam name="D"></typeparam>
            <param name="p"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Module.ModuleProxyManager.BeginCall``3(``1,``2,System.Action{``1,``2})">
            <summary>
            异步调用一个模块
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="P"></typeparam>
            <typeparam name="D"></typeparam>
            <param name="p"></param>
            <param name="data"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Module.ModuleProxyManager.EndCall``3(``0,``1,``2)">
            <summary>
            结束异步呼叫
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="P"></typeparam>
            <typeparam name="D"></typeparam>
            <param name="t"></param>
            <param name="p"></param>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="T:EFFC.Frame.Net.Base.Parameter.ColumnP">
            <summary>
            column的参数结构定义
            </summary>
        </member>
        <member name="T:EFFC.Frame.Net.Base.Parameter.ParameterStd">
            <summary>
            参数集合用于架构中逐层参数的传递-不提供线程安全处理
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.Parameter.ParameterStd.TransTokenList">
            <summary>
            事务token列表
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.Parameter.ParameterStd.Resources">
            <summary>
            资源管理器
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.Parameter.ParameterStd.CurrentTransToken">
            <summary>
            当前事务token
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Parameter.ColumnP.String_Type">
            <summary>
            String的Type描述
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Parameter.ColumnP.Int32_Type">
            <summary>
            Int的Type描述
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Parameter.ColumnP.Int64_Type">
            <summary>
            Int64的Type描述
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Parameter.ColumnP.Double_Type">
            <summary>
            Doube的Type描述
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Parameter.ColumnP.Float_Type">
            <summary>
            Float的Type描述
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.Parameter.ColumnP.DateTime_Type">
            <summary>
            DateTime的Type描述
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Parameter.ColumnP.CreatInstanse(System.String)">
            <summary>
            創建一個實例，栏位类型為默认的String类型，长度為无限制，允許為空
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Parameter.ColumnP.CreatInstanse(System.String,System.String)">
            <summary>
            創建一個實例，長度為無限制，允許為空
            </summary>
            <param name="column"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Parameter.ColumnP.CreatInstanse(System.String,System.String,System.Int32)">
            <summary>
            創建一個實例，允許為空
            </summary>
            <param name="column"></param>
            <param name="type"></param>
            <param name="MaxLength"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.ADBAccess.Query(System.String,EFFC.Frame.Net.Base.ResouceManage.DB.DBOParameterCollection)">
            <summary>
            查询接口
            </summary>
            <param name="sql"></param>
            <param name="dbp"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.ADBAccess.Open(System.String,System.Object[])">
            <summary>
            开启连接
            </summary>
            <param name="connString"></param>
            <param name="p"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.ADBAccess.Open(System.String)">
            <summary>
            开启连接
            </summary>
            <param name="connString"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.ADBAccess.Close">
            <summary>
            关闭连接
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.ADBAccess.BeginTransaction">
            <summary>
            开启事务
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.ADBAccess.BeginTransaction(EFFC.Frame.Net.Base.Constants.FrameIsolationLevel)">
            <summary>
            开启事务
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.ADBAccess.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            开启事务
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.ADBAccess.CommitTransaction">
            <summary>
            提交事务
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.ADBAccess.RollbackTransaction">
            <summary>
            回滚事务
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.ADBAccess.ExecuteNoQuery(System.String,EFFC.Frame.Net.Base.ResouceManage.DB.DBOParameterCollection)">
            <summary>
            执行非查询操作
            </summary>
            <param name="sql"></param>
            <param name="dbp"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.ADBAccess.Update(System.Data.DataTable,System.String)">
            <summary>
            更新操作
            </summary>
            <param name="data"></param>
            <param name="selectsql"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.ADBAccess.Insert(System.Data.DataTable,System.String)">
            <summary>
            新增操作
            </summary>
            <param name="data"></param>
            <param name="toTable"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.ADBAccess.Delete(System.Data.DataTable,System.String)">
            <summary>
            删除操作
            </summary>
            <param name="data"></param>
            <param name="toTable"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.ADBAccess.ExcuteProcedure(System.String,System.Boolean,EFFC.Frame.Net.Base.ResouceManage.DB.DBOParameterCollection@)">
            <summary>
            執行存儲過程
            </summary>
            <param name="sp_name"></param>
            <param name="isReturnDataSet"></param>
            <param name="dbp"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.ADBAccess.QueryByPage(System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,EFFC.Frame.Net.Base.ResouceManage.DB.DBOParameterCollection)">
            <summary>
            執行翻頁查詢，V1.0.0.0新增
            </summary>
            <param name="startRow"></param>
            <param name="endRow"></param>
            <param name="toPage"></param>
            <param name="count_of_page"></param>
            <param name="sql"></param>
            <param name="orderby"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.ADBAccess.StartPageByCondition(EFFC.Frame.Net.Base.Parameter.DBAPageP)">
            <summary>
            設定翻頁條件，啟動翻頁機制
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.ADBAccess.NextPage">
            <summary>
            下一頁的資料
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.ADBAccess.PrePage">
            <summary>
            上一頁的資料
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.ADBAccess.LastPage">
            <summary>
            最後一頁的資料
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.ADBAccess.FirstPage">
            <summary>
            第一頁的資料
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.ADBAccess.GoToPage(System.Int32)">
            <summary>
            跳到toPage页
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.ADBAccess.EndOfPage">
            <summary>
            判定是否已經尾頁
            </summary>
            <returns></returns>
        </member>
        <member name="P:EFFC.Frame.Net.Base.ResouceManage.DB.ADBAccess.TotalRow">
            <summary>
            總比數
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.ResouceManage.DB.ADBAccess.RowCountByPage">
            <summary>
            獲取翻頁下的總資料行數
            </summary>
            <returns></returns>
        </member>
        <member name="P:EFFC.Frame.Net.Base.ResouceManage.DB.ADBAccess.TotalPage">
            <summary>
            獲取翻頁下的總頁數
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.ResouceManage.DB.ADBAccess.CurrentPage">
            <summary>
            獲取翻頁下的當前頁數
            </summary>
        </member>
        <member name="T:EFFC.Frame.Net.Base.ResouceManage.DB.CmdParameter">
            <summary>
            執行參數類
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.CmdParameter.NewInstance(System.String,System.Object)">
            <summary>
            創建一個實例對象
            </summary>
            <param name="name">參數名稱</param>
            <param name="value">參數值</param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.CmdParameter.NewInstance(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            創建一個實例對象
            </summary>
            <param name="name">參數名稱</param>
            <param name="value">參數值</param>
            <param name="direction">參數指向</param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.CmdParameter.NewInstance(System.String,System.Object,System.Data.DbType)">
            <summary>
            創建一個實例對象
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.CmdParameter.NewInstance(System.String,System.Object,System.Data.DbType,System.Int32)">
            <summary>
            創建一個實例對象
            </summary>
            <param name="name">參數名称</param>
            <param name="value">參數值</param>
            <param name="datatype">參數類型，如果參數为返回值類型则必须指定</param>
            <param name="length">參數长度，如果參數为返回值類型则必须指定</param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.CmdParameter.NewInstance(System.String,System.Object,System.Data.DbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            創建一個實例對象
            </summary>
            <param name="name">參數名称</param>
            <param name="value">參數值</param>
            <param name="datatype">參數類型，如果參數为返回值類型则必须指定</param>
            <param name="length">參數长度，如果參數为返回值類型则必须指定</param>
            <param name="direction">參數指向</param>
            <returns></returns>
        </member>
        <member name="P:EFFC.Frame.Net.Base.ResouceManage.DB.CmdParameter.ParameterName">
            <summary>
            參數名稱
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.ResouceManage.DB.CmdParameter.ParameterValue">
            <summary>
            參數值
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.ResouceManage.DB.CmdParameter.Direction">
            <summary>
            參數的指向，輸入還是輸出
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.ResouceManage.DB.CmdParameter.DataType">
            <summary>
            数据類型，如果该參數为返回值類型则必须指定類型和长度
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.ResouceManage.DB.CmdParameter.DataLength">
            <summary>
            数据類型，如果该參數为返回值類型则必须指定類型和长度
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.ResouceManage.DB.DB2Access.isneedopentrans_in_open">
            <summary>
            需要在open的时候开启trans
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.DB2Access.FillParametersToCommand(System.Data.Common.DbCommand,EFFC.Frame.Net.Base.ResouceManage.DB.DBOParameterCollection)">
            <summary>
            依據Dictionary填充Command物件參數集
            </summary>
            <param name="command">命令物件</param>
            <param name="parameters">參數</param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.DB2Access.Delete(System.Data.DataTable,System.String)">
            <summary>
            暂不提供
            </summary>
            <param name="data"></param>
            <param name="toTable"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.DB2Access.GetColumnsNameBySql(System.String,EFFC.Frame.Net.Base.ResouceManage.DB.DBOParameterCollection)">
            <summary>
            通過sql獲得相關的欄位列表
            </summary>
            <param name="sql"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.DBDataCollection.GetReturnDataList``2">
            <summary>
            获取返回的数据集，并进行类型转化
            </summary>
            <typeparam name="T">IDataConvert</typeparam>
            <typeparam name="E">返回的数据类型</typeparam>
            <returns></returns>
        </member>
        <member name="P:EFFC.Frame.Net.Base.ResouceManage.DB.DBDataCollection.ReturnDataSet">
            <summary>
            查询过后返回的数据集
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.ResouceManage.DB.DBDataCollection.IsSuccess">
            <summary>
            执行是否成功
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.DBOParameterCollection.Add(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            添加一個新的參數
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="d"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.DBOParameterCollection.Add(System.String,System.Object,System.Data.DbType)">
            <summary>
            添加一個新的參數
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="type"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.DBOParameterCollection.Add(System.String,System.Object,System.Data.DbType,System.Int32)">
            <summary>
            添加一個新的參數
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="datatype"></param>
            <param name="length"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.DBOParameterCollection.Add(System.String,System.Object,System.Data.DbType,System.Int32,System.Data.ParameterDirection)">
            <summary>
            添加一個新的參數
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="datatype"></param>
            <param name="length"></param>
            <param name="d"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.DBOParameterCollection.SetValue(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            給一個已有的參數賦值
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="d"></param>
        </member>
        <member name="F:EFFC.Frame.Net.Base.ResouceManage.DB.OracleAccess.isneedopentrans_in_open">
            <summary>
            需要在open的时候开启trans
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.OracleAccess.FillParametersToCommand(System.Data.Common.DbCommand,EFFC.Frame.Net.Base.ResouceManage.DB.DBOParameterCollection)">
            <summary>
            依據Dictionary填充Command物件參數集
            </summary>
            <param name="command">命令物件</param>
            <param name="parameters">參數</param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.OracleAccess.Delete(System.Data.DataTable,System.String)">
            <summary>
            暂不提供
            </summary>
            <param name="data"></param>
            <param name="toTable"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.OracleAccess.GetColumnsNameBySql(System.String,EFFC.Frame.Net.Base.ResouceManage.DB.DBOParameterCollection)">
            <summary>
            通過sql獲得相關的欄位列表
            </summary>
            <param name="sql"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="F:EFFC.Frame.Net.Base.ResouceManage.DB.SQLServerAccess.isneedopentrans_in_open">
            <summary>
            需要在open的时候开启trans
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.SQLServerAccess.FillParametersToCommand(System.Data.Common.DbCommand,EFFC.Frame.Net.Base.ResouceManage.DB.DBOParameterCollection)">
            <summary>
            依據Dictionary填充Command物件參數集
            </summary>
            <param name="command">命令物件</param>
            <param name="parameters">參數</param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.SQLServerAccess.Release">
            <summary>
            釋放連接資源
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.SQLServerAccess.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            開啓事務處理
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.SQLServerAccess.RollbackTransaction">
            <summary>
            回滾事務
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.SQLServerAccess.ConvertBy(System.Type)">
            <summary>
            将Type转化成SqlDbType
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.SQLServerAccess.Delete(System.Data.DataTable,System.String)">
            <summary>
            根据数据集批量删除对应table中的数据
            </summary>
            <param name="data"></param>
            <param name="toTable"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.SQLServerAccess.GetColumnsNameBySql(System.String,EFFC.Frame.Net.Base.ResouceManage.DB.DBOParameterCollection)">
            <summary>
            通過sql獲得相關的欄位列表
            </summary>
            <param name="sql"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.SQLServerAccess.Dispose">
            <summary>
            GC回收機制
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.ResouceManage.DB.SQLServerAccess2000.isneedopentrans_in_open">
            <summary>
            需要在open的时候开启trans
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.SQLServerAccess2000.FillParametersToCommand(System.Data.Common.DbCommand,EFFC.Frame.Net.Base.ResouceManage.DB.DBOParameterCollection)">
            <summary>
            依據Dictionary填充Command物件參數集
            </summary>
            <param name="command">命令物件</param>
            <param name="parameters">參數</param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.SQLServerAccess2000.Release">
            <summary>
            釋放連接資源
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.SQLServerAccess2000.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            開啓事務處理
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.SQLServerAccess2000.RollbackTransaction">
            <summary>
            回滾事務
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.SQLServerAccess2000.ConvertBy(System.Type)">
            <summary>
            将Type转化成SqlDbType
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.SQLServerAccess2000.Delete(System.Data.DataTable,System.String)">
            <summary>
            根据数据集批量删除对应table中的数据
            </summary>
            <param name="data"></param>
            <param name="toTable"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.SQLServerAccess2000.GetColumnsNameBySql(System.String,EFFC.Frame.Net.Base.ResouceManage.DB.DBOParameterCollection)">
            <summary>
            通過sql獲得相關的欄位列表
            </summary>
            <param name="sql"></param>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.DB.SQLServerAccess2000.Dispose">
            <summary>
            GC回收機制
            </summary>
        </member>
        <member name="F:EFFC.Frame.Net.Base.ResouceManage.Files.CompressFile.zipOper">
            <summary>
            壓縮操作對象
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.Files.CompressFile.#ctor">
            <summary>
            構造函數
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.Files.CompressFile.CompressReturnFileName">
            <summary>
            壓縮文件返回壓縮檔名稱
            </summary>
            <returns>string 返回壓縮后的zip文件名稱</returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.Files.CompressFile.CompressReturnStream">
            <summary>
            壓縮返回文件流
            </summary>
            <returns>Stream 返回壓縮后在文件流</returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.Files.CompressFile.Dispose">
            <summary>
            GC回收机制，无须调用
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.ResouceManage.Files.CompressFile.ZipParameter">
            <summary>
            壓縮文件參數
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.ResouceManage.Files.ZipParameter.Zip_Name">
            <summary>
            壓縮后的文件名稱
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.ResouceManage.Files.ZipParameter.DirectoryName">
            <summary>
            被壓縮的目錄名稱
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.ResouceManage.Files.ZipParameter.File">
            <summary>
            單個文件
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.ResouceManage.Files.ZipParameter.FileList">
            <summary>
            備壓縮的文件List
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.ResouceManage.Files.ZipParameter.Password">
            <summary>
            加密密碼
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.ResouceManage.Files.ZipParameter.Level">
            <summary>
            壓縮比例等級，默認為6，0 - store only to 9 - means best compression
            </summary>
        </member>
        <member name="T:EFFC.Frame.Net.Base.ResouceManage.FTP.FTPAccess">
            <summary>
            FTP连接资源工具类
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.FTP.FTPAccess.FindMappingFileName(EFFC.Frame.Net.Base.ResouceManage.FTP.FtpParameter)">
            <summary>
            從fpt上找到對應的存在文件的名稱，以便忽略大小寫，提供給download方法使用
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.FTP.FTPAccess.IsExists(EFFC.Frame.Net.Base.ResouceManage.FTP.FtpParameter)">
            <summary>
            判斷指定的文件是否存在
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.FTP.FTPAccess.DownLoad(EFFC.Frame.Net.Base.ResouceManage.FTP.FtpParameter)">
            <summary>
            下載文件，FTP_URL,DownLoad_Path,DownLoad_FileName必須有傳入，否則報異常
            如果发现下载的目录有同名档将删除同名档
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.FTP.FTPAccess.Upload(EFFC.Frame.Net.Base.ResouceManage.FTP.FtpParameter)">
            <summary>
            上傳文件，FTP_URL,Upload_FilePath必須有傳入，否則報異常
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.FTP.FTPAccess.ListDirectory(EFFC.Frame.Net.Base.ResouceManage.FTP.FtpParameter)">
            <summary>
            list出ftp的目錄
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.FTP.FTPAccess.FileSize(EFFC.Frame.Net.Base.ResouceManage.FTP.FtpParameter)">
            <summary>
            獲取指定文件的size
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.FTP.FTPAccess.ListFileSize(EFFC.Frame.Net.Base.ResouceManage.FTP.FtpParameter)">
            <summary>
            獲取指定url下所有文件的size
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.FTP.FTPAccess.Dispose">
            <summary>
            GC回收机制
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.ResouceManage.FTP.FtpParameter.FTP_URL">
            <summary>
            FTP URL含完整的ftp访问串 ftp://xxxxx:xxx/xxxx
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.ResouceManage.FTP.FtpParameter.Login_UserId">
            <summary>
            ftp登陸的用戶ID
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.ResouceManage.FTP.FtpParameter.Login_Password">
            <summary>
            FTP登陸的密码
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.ResouceManage.FTP.FtpParameter.DownLoad_Path">
            <summary>
            下载目標位置路徑
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.ResouceManage.FTP.FtpParameter.DownLoad_FileName">
            <summary>
            下載后文件名稱
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.ResouceManage.FTP.FtpParameter.Upload_FilePath">
            <summary>
            上傳的問價路徑（含名称）
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.ResouceManage.FTP.FtpParameter.UseBinary">
            <summary>
            true 向伺服器表示，要傳輸的資料是二進位資料，而 false 則表示資料是文字。預設值為 false。
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.ResouceManage.FTP.FtpParameter.KeepAlive">
            <summary>
            取得或設定 System.Boolean 值，指定在要求完成之後，與 FTP 伺服器的控制連接是否關閉。預設值為 false。
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.ResouceManage.FTP.FtpParameter.UsePassive">
            <summary>
            如果用戶端應用程式的資料傳輸處理序會接聽資料通訊埠上的連接，則為 false，如果用戶端應該在資料通訊埠上啟始連接，則為 true。預設值為 false。
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.ResouceManage.FTP.FtpParameter.TimeOut">
            <summary>
            FTP连接超时设定,預設值為 30。
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.ResouceManage.FTP.FtpParameter.EncodingString">
            <summary>
            文字編碼，如UTF-8，big5等,預設值為 UTF-8。
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.ResourceManage.CreateInstance``1">
            <summary>
            创建一个默认生命周期的资源
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.ResourceManage.CreateInstance``1(System.String)">
            <summary>
            创建一个资源
            </summary>
            <typeparam name="T">IResourceEntity资源类型</typeparam>
            <param name="lifeCycleToken">生命周期token</param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.ResourceManage.AddEntity(System.String,EFFC.Frame.Net.Base.Interfaces.Core.IResourceEntity)">
            <summary>
            新增资源对象
            </summary>
            <param name="lifeCycleToken">生命周期token</param>
            <param name="e">资源实例</param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.ResourceManage.AddEntity(EFFC.Frame.Net.Base.Token.TransactionToken,EFFC.Frame.Net.Base.Interfaces.Core.IResourceEntity)">
            <summary>
            新增资源对象
            </summary>
            <param name="token">生命周期token</param>
            <param name="e">资源实例</param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.ResourceManage.Release">
            <summary>
            释放默认生命周期下的资源
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.ResourceManage.Release(System.String)">
            <summary>
            资源释放
            </summary>
            <param name="lifeCycleToken"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.ResourceManage.Release(EFFC.Frame.Net.Base.Token.TransactionToken)">
            <summary>
            释放资源
            </summary>
            <param name="token">TransactionToken</param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.ResourceManage.ReleaseAll">
            <summary>
            释放所有资源
            </summary>
        </member>
        <member name="T:EFFC.Frame.Net.Base.ResouceManage.JsEngine.HostJsLockObejctEntity">
            <summary>
            给hostjs使用的代码锁资源
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.JsEngine.HostJsLockObejctEntity.Lock(System.String)">
            <summary>
            根据lock名称锁定一个对象
            </summary>
            <param name="itemname"></param>
        </member>
        <member name="M:EFFC.Frame.Net.Base.ResouceManage.JsEngine.HostJsLockObejctEntity.Free(System.String)">
            <summary>
            释放指定名称的锁
            </summary>
            <param name="itemname"></param>
        </member>
        <member name="P:EFFC.Frame.Net.Base.ResouceManage.JsEngine.HostJsLockObejctEntity.CurrentWorkArea">
            <summary>
            当前作用区域
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.ResouceManage.JsEngine.HostJsLockObejctEntity.LockItem.State">
            <summary>
            对象的状态
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.ResouceManage.JsEngine.HostJsLockObejctEntity.LockItem.Name">
            <summary>
            对象的名称
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Token.TransactionToken.NewToken">
            <summary>
            获取一个新的Token
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Token.TransactionToken.NewToken(System.Int32)">
            <summary>
            获取一个新的token，并设定失效时间
            </summary>
            <param name="expiredminutes"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Token.TransactionToken.NewToken(EFFC.Frame.Net.Base.Constants.FrameIsolationLevel)">
            <summary>
            获取一个新的token，并设定隔离级别
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Token.TransactionToken.NewToken(EFFC.Frame.Net.Base.Constants.FrameIsolationLevel,System.Int32)">
            <summary>
            获取一个新的token，并设定隔离级别和失效时间
            </summary>
            <param name="level"></param>
            <param name="expiredminutes"></param>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Token.TransactionToken.Release">
            <summary>
            释放token
            </summary>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Token.TransactionToken.ToString">
            <summary>
            转换成串
            </summary>
            <returns></returns>
        </member>
        <member name="M:EFFC.Frame.Net.Base.Token.TransactionToken.IsMe(System.String)">
            <summary>
            判断一个串是否就是自己，即相同
            </summary>
            <param name="s">合法的token串</param>
            <returns></returns>
        </member>
        <member name="P:EFFC.Frame.Net.Base.Token.TransactionToken.CurrentStatus">
            <summary>
            当前事务的状态
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.Token.TransactionToken.IsolationLevel">
            <summary>
            当前事务隔离级别
            </summary>
        </member>
        <member name="P:EFFC.Frame.Net.Base.Token.TransactionToken.IsExpired">
            <summary>
            判断本token是否已经失效
            </summary>
        </member>
    </members>
</doc>
